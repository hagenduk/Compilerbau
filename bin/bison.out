Terminale, die in Grammatik unbenutzt sind

   COLON
   END_OF_FILE
   SHIFT_LEFT
   SHIFT_RIGHT
   NOT
   UNARY_PLUS


Zustand 116 Konflikte: 1 Schiebe/Reduziere


Grammatik

    0 $accept: program $end

    1 program: program_element_list

    2 program_element_list: program_element_list program_element
    3                     | program_element

    4 program_element: declaration SEMICOLON
    5                | function_definition
    6                | SEMICOLON

    7 type: INT
    8     | VOID

    9 declaration: declaration COMMA declaration_element
   10            | type declaration_element

   11 declaration_element: identifier_declaration
   12                    | function_header

   13 identifier_declaration: identifier_declaration BRACKET_OPEN expression BRACKET_CLOSE
   14                       | ID

   15 function_definition: type function_header BRACE_OPEN stmt_list BRACE_CLOSE

   16 function_header: function_prefix PARA_CLOSE

   17 function_prefix: function_signature
   18                | function_signature_parameters

   19 function_signature: identifier_declaration PARA_OPEN

   20 function_signature_parameters: function_signature_parameters COMMA function_parameter_element
   21                              | function_signature function_parameter_element

   22 function_parameter_element: type identifier_declaration

   23 stmt_list: /* leer */
   24          | stmt_list stmt

   25 stmt: stmt_block
   26     | declaration SEMICOLON
   27     | expression SEMICOLON
   28     | stmt_conditional
   29     | stmt_loop
   30     | RETURN expression SEMICOLON
   31     | RETURN SEMICOLON
   32     | SEMICOLON

   33 stmt_block: BRACE_OPEN stmt_list BRACE_CLOSE

   34 stmt_conditional: IF PARA_OPEN expression PARA_CLOSE stmt
   35                 | IF PARA_OPEN expression PARA_CLOSE stmt ELSE stmt

   36 stmt_loop: WHILE PARA_OPEN expression PARA_CLOSE stmt
   37          | DO stmt WHILE PARA_OPEN expression PARA_CLOSE SEMICOLON

   38 expression: expression ASSIGN expression
   39           | expression LOGICAL_OR expression
   40           | expression LOGICAL_AND expression
   41           | LOGICAL_NOT expression
   42           | expression EQ expression
   43           | expression NE expression
   44           | expression LS expression
   45           | expression LSEQ expression
   46           | expression GTEQ expression
   47           | expression GT expression
   48           | expression PLUS expression
   49           | expression MINUS expression
   50           | expression MUL expression
   51           | expression DIV expression
   52           | expression MOD expression
   53           | MINUS expression
   54           | ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | PARA_OPEN expression PARA_CLOSE
   56           | function_call PARA_CLOSE
   57           | primary

   58 primary: NUM
   59        | ID

   60 function_call: ID PARA_OPEN
   61              | function_call_parameters

   62 function_call_parameters: function_call_parameters COMMA expression
   63                         | ID PARA_OPEN expression


Terminale und die Regeln, in denen sie verwendet werden

$end (0) 0
error (256)
DO (258) 37
WHILE (259) 36 37
IF (260) 34 35
ELSE (261) 35
INT (262) 7
VOID (263) 8
RETURN (264) 30 31
COLON (265)
COMMA (266) 9 20 62
SEMICOLON (267) 4 6 26 27 30 31 32 37
BRACE_OPEN (268) 15 33
BRACE_CLOSE (269) 15 33
END_OF_FILE (270)
ID (271) 14 54 59 60 63
NUM (272) 58
ASSIGN (273) 38
LOGICAL_OR (274) 39
LOGICAL_NOT (275) 41
LOGICAL_AND (276) 40
SHIFT_LEFT (277)
SHIFT_RIGHT (278)
EQ (279) 42
NE (280) 43
LS (281) 44
LSEQ (282) 45
GTEQ (283) 46
GT (284) 47
PLUS (285) 48
MINUS (286) 49 53
MUL (287) 50
DIV (288) 51
MOD (289) 52
NOT (290)
UNARY_MINUS (291)
UNARY_PLUS (292)
BRACKET_OPEN (293) 13 54
BRACKET_CLOSE (294) 13 54
PARA_OPEN (295) 19 34 35 36 37 55 60 63
PARA_CLOSE (296) 16 34 35 36 37 55 56


<<<<<<< HEAD
Nonterminals, with rules where they appear

$accept (42)
    on left: 0
program (43)
    on left: 1, on right: 0
program_element_list (44)
    on left: 2 3, on right: 1 2
program_element (45)
    on left: 4 5 6, on right: 2 3
type (46)
    on left: 7 8, on right: 10 15 22
declaration (47)
    on left: 9 10, on right: 4 9 26
declaration_element (48)
    on left: 11 12, on right: 9 10
identifier_declaration (49)
    on left: 13 14, on right: 11 13 19 22
function_definition (50)
    on left: 15, on right: 5
function_header (51)
    on left: 16, on right: 12 15
function_prefix (52)
    on left: 17 18, on right: 16
function_signature (53)
    on left: 19, on right: 17 21
function_signature_parameters (54)
    on left: 20 21, on right: 18 20
function_parameter_element (55)
    on left: 22, on right: 20 21
stmt_list (56)
    on left: 23 24, on right: 15 24 33
stmt (57)
    on left: 25 26 27 28 29 30 31 32, on right: 24 34 35 36 37
stmt_block (58)
    on left: 33, on right: 25
stmt_conditional (59)
    on left: 34 35, on right: 28
stmt_loop (60)
    on left: 36 37, on right: 29
expression (61)
    on left: 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55
    56 57, on right: 13 27 30 34 35 36 37 38 39 40 41 42 43 44 45 46
    47 48 49 50 51 52 53 55 62 63
primary (62)
    on left: 58 59, on right: 54 57
function_call (63)
    on left: 60 61, on right: 56
function_call_parameters (64)
    on left: 62 63, on right: 61 62


state 0
=======
Nicht-Terminal und die Regeln, in denen sie verwendet werden

$accept (42)
    auf der linken Seite: 0
program (43)
    auf der linken Seite: 1, auf der rechten Seite: 0
program_element_list (44)
    auf der linken Seite: 2 3, auf der rechten Seite: 1 2
program_element (45)
    auf der linken Seite: 4 5 6, auf der rechten Seite: 2 3
type (46)
    auf der linken Seite: 7 8, auf der rechten Seite: 10 15 22
declaration (47)
    auf der linken Seite: 9 10, auf der rechten Seite: 4 9 26
declaration_element (48)
    auf der linken Seite: 11 12, auf der rechten Seite: 9 10
identifier_declaration (49)
    auf der linken Seite: 13 14, auf der rechten Seite: 11 13 19 22
function_definition (50)
    auf der linken Seite: 15, auf der rechten Seite: 5
function_header (51)
    auf der linken Seite: 16, auf der rechten Seite: 12 15
function_prefix (52)
    auf der linken Seite: 17 18, auf der rechten Seite: 16
function_signature (53)
    auf der linken Seite: 19, auf der rechten Seite: 17 21
function_signature_parameters (54)
    auf der linken Seite: 20 21, auf der rechten Seite: 18 20
function_parameter_element (55)
    auf der linken Seite: 22, auf der rechten Seite: 20 21
stmt_list (56)
    auf der linken Seite: 23 24, auf der rechten Seite: 15 24 33
stmt (57)
    auf der linken Seite: 25 26 27 28 29 30 31 32, auf der rechten Seite:
    24 34 35 36 37
stmt_block (58)
    auf der linken Seite: 33, auf der rechten Seite: 25
stmt_conditional (59)
    auf der linken Seite: 34 35, auf der rechten Seite: 28
stmt_loop (60)
    auf der linken Seite: 36 37, auf der rechten Seite: 29
expression (61)
    auf der linken Seite: 38 39 40 41 42 43 44 45 46 47 48 49 50 51
    52 53 54 55 56 57, auf der rechten Seite: 13 27 30 34 35 36 37
    38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 55 62 63
primary (62)
    auf der linken Seite: 58 59, auf der rechten Seite: 54 57
function_call (63)
    auf der linken Seite: 60 61, auf der rechten Seite: 56
function_call_parameters (64)
    auf der linken Seite: 62 63, auf der rechten Seite: 61 62


Zustand 0
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

    0 $accept: . program $end
    1 program: . program_element_list
    2 program_element_list: . program_element_list program_element
    3                     | . program_element
    4 program_element: . declaration SEMICOLON
    5                | . function_definition
    6                | . SEMICOLON
    7 type: . INT
    8     | . VOID
    9 declaration: . declaration COMMA declaration_element
   10            | . type declaration_element
   15 function_definition: . type function_header BRACE_OPEN stmt_list BRACE_CLOSE

    INT        schiebe und gehe zu Zustand 1 über
    VOID       schiebe und gehe zu Zustand 2 über
    SEMICOLON  schiebe und gehe zu Zustand 3 über

    program               gehe zu Zustand 4 über
    program_element_list  gehe zu Zustand 5 über
    program_element       gehe zu Zustand 6 über
    type                  gehe zu Zustand 7 über
    declaration           gehe zu Zustand 8 über
    function_definition   gehe zu Zustand 9 über


Zustand 1

    7 type: INT .

    $default  reduziere mit Regel 7 (type)


Zustand 2

    8 type: VOID .

    $default  reduziere mit Regel 8 (type)


Zustand 3

    6 program_element: SEMICOLON .

    $default  reduziere mit Regel 6 (program_element)


Zustand 4

    0 $accept: program . $end

    $end  schiebe und gehe zu Zustand 10 über


Zustand 5

    1 program: program_element_list .  [$end]
    2 program_element_list: program_element_list . program_element
    4 program_element: . declaration SEMICOLON
    5                | . function_definition
    6                | . SEMICOLON
    7 type: . INT
    8     | . VOID
    9 declaration: . declaration COMMA declaration_element
   10            | . type declaration_element
   15 function_definition: . type function_header BRACE_OPEN stmt_list BRACE_CLOSE

    INT        schiebe und gehe zu Zustand 1 über
    VOID       schiebe und gehe zu Zustand 2 über
    SEMICOLON  schiebe und gehe zu Zustand 3 über

    $default  reduziere mit Regel 1 (program)

    program_element      gehe zu Zustand 11 über
    type                 gehe zu Zustand 7 über
    declaration          gehe zu Zustand 8 über
    function_definition  gehe zu Zustand 9 über


Zustand 6

    3 program_element_list: program_element .

    $default  reduziere mit Regel 3 (program_element_list)


Zustand 7

   10 declaration: type . declaration_element
   11 declaration_element: . identifier_declaration
   12                    | . function_header
   13 identifier_declaration: . identifier_declaration BRACKET_OPEN expression BRACKET_CLOSE
   14                       | . ID
   15 function_definition: type . function_header BRACE_OPEN stmt_list BRACE_CLOSE
   16 function_header: . function_prefix PARA_CLOSE
   17 function_prefix: . function_signature
   18                | . function_signature_parameters
   19 function_signature: . identifier_declaration PARA_OPEN
   20 function_signature_parameters: . function_signature_parameters COMMA function_parameter_element
   21                              | . function_signature function_parameter_element

    ID  schiebe und gehe zu Zustand 12 über

    declaration_element            gehe zu Zustand 13 über
    identifier_declaration         gehe zu Zustand 14 über
    function_header                gehe zu Zustand 15 über
    function_prefix                gehe zu Zustand 16 über
    function_signature             gehe zu Zustand 17 über
    function_signature_parameters  gehe zu Zustand 18 über


Zustand 8

    4 program_element: declaration . SEMICOLON
    9 declaration: declaration . COMMA declaration_element

    COMMA      schiebe und gehe zu Zustand 19 über
    SEMICOLON  schiebe und gehe zu Zustand 20 über


Zustand 9

    5 program_element: function_definition .

    $default  reduziere mit Regel 5 (program_element)


Zustand 10

    0 $accept: program $end .

    $default  annehmen


Zustand 11

    2 program_element_list: program_element_list program_element .

    $default  reduziere mit Regel 2 (program_element_list)


Zustand 12

   14 identifier_declaration: ID .

    $default  reduziere mit Regel 14 (identifier_declaration)


Zustand 13

   10 declaration: type declaration_element .

    $default  reduziere mit Regel 10 (declaration)


Zustand 14

   11 declaration_element: identifier_declaration .  [COMMA, SEMICOLON]
   13 identifier_declaration: identifier_declaration . BRACKET_OPEN expression BRACKET_CLOSE
   19 function_signature: identifier_declaration . PARA_OPEN

<<<<<<< HEAD
    BRACKET_OPEN  shift, and go to state 21
    PARA_OPEN     shift, and go to state 22
=======
    BRACKET_OPEN  schiebe und gehe zu Zustand 21 über
    PARA_OPEN     schiebe und gehe zu Zustand 22 über
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

    $default  reduziere mit Regel 11 (declaration_element)


Zustand 15

   12 declaration_element: function_header .  [COMMA, SEMICOLON]
   15 function_definition: type function_header . BRACE_OPEN stmt_list BRACE_CLOSE

    BRACE_OPEN  schiebe und gehe zu Zustand 23 über

    $default  reduziere mit Regel 12 (declaration_element)


Zustand 16

   16 function_header: function_prefix . PARA_CLOSE

    PARA_CLOSE  schiebe und gehe zu Zustand 24 über


Zustand 17

    7 type: . INT
    8     | . VOID
   17 function_prefix: function_signature .  [PARA_CLOSE]
   21 function_signature_parameters: function_signature . function_parameter_element
   22 function_parameter_element: . type identifier_declaration

    INT   schiebe und gehe zu Zustand 1 über
    VOID  schiebe und gehe zu Zustand 2 über

    $default  reduziere mit Regel 17 (function_prefix)

    type                        gehe zu Zustand 25 über
    function_parameter_element  gehe zu Zustand 26 über


Zustand 18

   18 function_prefix: function_signature_parameters .  [PARA_CLOSE]
   20 function_signature_parameters: function_signature_parameters . COMMA function_parameter_element

    COMMA  schiebe und gehe zu Zustand 27 über

    $default  reduziere mit Regel 18 (function_prefix)


Zustand 19

    9 declaration: declaration COMMA . declaration_element
   11 declaration_element: . identifier_declaration
   12                    | . function_header
   13 identifier_declaration: . identifier_declaration BRACKET_OPEN expression BRACKET_CLOSE
   14                       | . ID
   16 function_header: . function_prefix PARA_CLOSE
   17 function_prefix: . function_signature
   18                | . function_signature_parameters
   19 function_signature: . identifier_declaration PARA_OPEN
   20 function_signature_parameters: . function_signature_parameters COMMA function_parameter_element
   21                              | . function_signature function_parameter_element

    ID  schiebe und gehe zu Zustand 12 über

    declaration_element            gehe zu Zustand 28 über
    identifier_declaration         gehe zu Zustand 14 über
    function_header                gehe zu Zustand 29 über
    function_prefix                gehe zu Zustand 16 über
    function_signature             gehe zu Zustand 17 über
    function_signature_parameters  gehe zu Zustand 18 über


Zustand 20

    4 program_element: declaration SEMICOLON .

    $default  reduziere mit Regel 4 (program_element)


<<<<<<< HEAD
state 21
=======
Zustand 21
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

   13 identifier_declaration: identifier_declaration BRACKET_OPEN . expression BRACKET_CLOSE
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

<<<<<<< HEAD
    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    MINUS        shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    expression                go to state 35
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 22

   19 function_signature: identifier_declaration PARA_OPEN .

    $default  reduce using rule 19 (function_signature)
=======
    ID           schiebe und gehe zu Zustand 30 über
    NUM          schiebe und gehe zu Zustand 31 über
    LOGICAL_NOT  schiebe und gehe zu Zustand 32 über
    MINUS        schiebe und gehe zu Zustand 33 über
    PARA_OPEN    schiebe und gehe zu Zustand 34 über

    expression                gehe zu Zustand 35 über
    primary                   gehe zu Zustand 36 über
    function_call             gehe zu Zustand 37 über
    function_call_parameters  gehe zu Zustand 38 über


Zustand 22

   19 function_signature: identifier_declaration PARA_OPEN .

    $default  reduziere mit Regel 19 (function_signature)
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074


Zustand 23

   15 function_definition: type function_header BRACE_OPEN . stmt_list BRACE_CLOSE
   23 stmt_list: .
   24          | . stmt_list stmt

    $default  reduziere mit Regel 23 (stmt_list)

    stmt_list  gehe zu Zustand 39 über


Zustand 24

   16 function_header: function_prefix PARA_CLOSE .

    $default  reduziere mit Regel 16 (function_header)


Zustand 25

   13 identifier_declaration: . identifier_declaration BRACKET_OPEN expression BRACKET_CLOSE
   14                       | . ID
   22 function_parameter_element: type . identifier_declaration

    ID  schiebe und gehe zu Zustand 12 über

    identifier_declaration  gehe zu Zustand 40 über


Zustand 26

   21 function_signature_parameters: function_signature function_parameter_element .

    $default  reduziere mit Regel 21 (function_signature_parameters)


Zustand 27

    7 type: . INT
    8     | . VOID
   20 function_signature_parameters: function_signature_parameters COMMA . function_parameter_element
   22 function_parameter_element: . type identifier_declaration

    INT   schiebe und gehe zu Zustand 1 über
    VOID  schiebe und gehe zu Zustand 2 über

    type                        gehe zu Zustand 25 über
    function_parameter_element  gehe zu Zustand 41 über


Zustand 28

    9 declaration: declaration COMMA declaration_element .

    $default  reduziere mit Regel 9 (declaration)


Zustand 29

   12 declaration_element: function_header .

    $default  reduziere mit Regel 12 (declaration_element)


Zustand 30

   54 expression: ID . BRACKET_OPEN primary BRACKET_CLOSE
   59 primary: ID .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, EQ, NE, LS, LSEQ, GTEQ, GT, PLUS, MINUS, MUL, DIV, MOD, BRACKET_CLOSE, PARA_CLOSE]
   60 function_call: ID . PARA_OPEN
   63 function_call_parameters: ID . PARA_OPEN expression

<<<<<<< HEAD
    BRACKET_OPEN  shift, and go to state 42
    PARA_OPEN     shift, and go to state 43
=======
    BRACKET_OPEN  schiebe und gehe zu Zustand 42 über
    PARA_OPEN     schiebe und gehe zu Zustand 43 über
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

    $default  reduziere mit Regel 59 (primary)


Zustand 31

   58 primary: NUM .

    $default  reduziere mit Regel 58 (primary)


<<<<<<< HEAD
state 32
=======
Zustand 32
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   41           | LOGICAL_NOT . expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

<<<<<<< HEAD
    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    MINUS        shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    expression                go to state 44
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 33
=======
    ID           schiebe und gehe zu Zustand 30 über
    NUM          schiebe und gehe zu Zustand 31 über
    LOGICAL_NOT  schiebe und gehe zu Zustand 32 über
    MINUS        schiebe und gehe zu Zustand 33 über
    PARA_OPEN    schiebe und gehe zu Zustand 34 über

    expression                gehe zu Zustand 44 über
    primary                   gehe zu Zustand 36 über
    function_call             gehe zu Zustand 37 über
    function_call_parameters  gehe zu Zustand 38 über


Zustand 33

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   53           | MINUS . expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    ID           schiebe und gehe zu Zustand 30 über
    NUM          schiebe und gehe zu Zustand 31 über
    LOGICAL_NOT  schiebe und gehe zu Zustand 32 über
    MINUS        schiebe und gehe zu Zustand 33 über
    PARA_OPEN    schiebe und gehe zu Zustand 34 über
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

    expression                gehe zu Zustand 45 über
    primary                   gehe zu Zustand 36 über
    function_call             gehe zu Zustand 37 über
    function_call_parameters  gehe zu Zustand 38 über


Zustand 34

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   55           | PARA_OPEN . expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

<<<<<<< HEAD
    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    MINUS        shift, and go to state 33
    PARA_OPEN    shift, and go to state 34
=======
    ID           schiebe und gehe zu Zustand 30 über
    NUM          schiebe und gehe zu Zustand 31 über
    LOGICAL_NOT  schiebe und gehe zu Zustand 32 über
    MINUS        schiebe und gehe zu Zustand 33 über
    PARA_OPEN    schiebe und gehe zu Zustand 34 über
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

    expression                gehe zu Zustand 46 über
    primary                   gehe zu Zustand 36 über
    function_call             gehe zu Zustand 37 über
    function_call_parameters  gehe zu Zustand 38 über


Zustand 35

   13 identifier_declaration: identifier_declaration BRACKET_OPEN expression . BRACKET_CLOSE
   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

<<<<<<< HEAD
    ASSIGN         shift, and go to state 47
    LOGICAL_OR     shift, and go to state 48
    LOGICAL_AND    shift, and go to state 49
    EQ             shift, and go to state 50
    NE             shift, and go to state 51
    LS             shift, and go to state 52
    LSEQ           shift, and go to state 53
    GTEQ           shift, and go to state 54
    GT             shift, and go to state 55
    PLUS           shift, and go to state 56
    MINUS          shift, and go to state 57
    MUL            shift, and go to state 58
    DIV            shift, and go to state 59
    MOD            shift, and go to state 60
    BRACKET_CLOSE  shift, and go to state 61


state 36
=======
    ASSIGN         schiebe und gehe zu Zustand 47 über
    LOGICAL_OR     schiebe und gehe zu Zustand 48 über
    LOGICAL_AND    schiebe und gehe zu Zustand 49 über
    EQ             schiebe und gehe zu Zustand 50 über
    NE             schiebe und gehe zu Zustand 51 über
    LS             schiebe und gehe zu Zustand 52 über
    LSEQ           schiebe und gehe zu Zustand 53 über
    GTEQ           schiebe und gehe zu Zustand 54 über
    GT             schiebe und gehe zu Zustand 55 über
    PLUS           schiebe und gehe zu Zustand 56 über
    MINUS          schiebe und gehe zu Zustand 57 über
    MUL            schiebe und gehe zu Zustand 58 über
    DIV            schiebe und gehe zu Zustand 59 über
    MOD            schiebe und gehe zu Zustand 60 über
    BRACKET_CLOSE  schiebe und gehe zu Zustand 61 über


Zustand 36
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

   57 expression: primary .

    $default  reduziere mit Regel 57 (expression)


Zustand 37

   56 expression: function_call . PARA_CLOSE

    PARA_CLOSE  schiebe und gehe zu Zustand 62 über


Zustand 38

   61 function_call: function_call_parameters .  [PARA_CLOSE]
   62 function_call_parameters: function_call_parameters . COMMA expression

    COMMA  schiebe und gehe zu Zustand 63 über

    $default  reduziere mit Regel 61 (function_call)


Zustand 39

    7 type: . INT
    8     | . VOID
    9 declaration: . declaration COMMA declaration_element
   10            | . type declaration_element
   15 function_definition: type function_header BRACE_OPEN stmt_list . BRACE_CLOSE
   24 stmt_list: stmt_list . stmt
   25 stmt: . stmt_block
   26     | . declaration SEMICOLON
   27     | . expression SEMICOLON
   28     | . stmt_conditional
   29     | . stmt_loop
   30     | . RETURN expression SEMICOLON
   31     | . RETURN SEMICOLON
   32     | . SEMICOLON
   33 stmt_block: . BRACE_OPEN stmt_list BRACE_CLOSE
   34 stmt_conditional: . IF PARA_OPEN expression PARA_CLOSE stmt
   35                 | . IF PARA_OPEN expression PARA_CLOSE stmt ELSE stmt
   36 stmt_loop: . WHILE PARA_OPEN expression PARA_CLOSE stmt
   37          | . DO stmt WHILE PARA_OPEN expression PARA_CLOSE SEMICOLON
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

<<<<<<< HEAD
    DO           shift, and go to state 64
    WHILE        shift, and go to state 65
    IF           shift, and go to state 66
    INT          shift, and go to state 1
    VOID         shift, and go to state 2
    RETURN       shift, and go to state 67
    SEMICOLON    shift, and go to state 68
    BRACE_OPEN   shift, and go to state 69
    BRACE_CLOSE  shift, and go to state 70
    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    MINUS        shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    type                      go to state 71
    declaration               go to state 72
    stmt                      go to state 73
    stmt_block                go to state 74
    stmt_conditional          go to state 75
    stmt_loop                 go to state 76
    expression                go to state 77
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 40
=======
    DO           schiebe und gehe zu Zustand 64 über
    WHILE        schiebe und gehe zu Zustand 65 über
    IF           schiebe und gehe zu Zustand 66 über
    INT          schiebe und gehe zu Zustand 1 über
    VOID         schiebe und gehe zu Zustand 2 über
    RETURN       schiebe und gehe zu Zustand 67 über
    SEMICOLON    schiebe und gehe zu Zustand 68 über
    BRACE_OPEN   schiebe und gehe zu Zustand 69 über
    BRACE_CLOSE  schiebe und gehe zu Zustand 70 über
    ID           schiebe und gehe zu Zustand 30 über
    NUM          schiebe und gehe zu Zustand 31 über
    LOGICAL_NOT  schiebe und gehe zu Zustand 32 über
    MINUS        schiebe und gehe zu Zustand 33 über
    PARA_OPEN    schiebe und gehe zu Zustand 34 über

    type                      gehe zu Zustand 71 über
    declaration               gehe zu Zustand 72 über
    stmt                      gehe zu Zustand 73 über
    stmt_block                gehe zu Zustand 74 über
    stmt_conditional          gehe zu Zustand 75 über
    stmt_loop                 gehe zu Zustand 76 über
    expression                gehe zu Zustand 77 über
    primary                   gehe zu Zustand 36 über
    function_call             gehe zu Zustand 37 über
    function_call_parameters  gehe zu Zustand 38 über


Zustand 40
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

   13 identifier_declaration: identifier_declaration . BRACKET_OPEN expression BRACKET_CLOSE
   22 function_parameter_element: type identifier_declaration .  [COMMA, PARA_CLOSE]

<<<<<<< HEAD
    BRACKET_OPEN  shift, and go to state 21
=======
    BRACKET_OPEN  schiebe und gehe zu Zustand 21 über
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

    $default  reduziere mit Regel 22 (function_parameter_element)


Zustand 41

   20 function_signature_parameters: function_signature_parameters COMMA function_parameter_element .

    $default  reduziere mit Regel 20 (function_signature_parameters)


<<<<<<< HEAD
state 42
=======
Zustand 42
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

   54 expression: ID BRACKET_OPEN . primary BRACKET_CLOSE
   58 primary: . NUM
   59        | . ID

<<<<<<< HEAD
    ID   shift, and go to state 78
    NUM  shift, and go to state 31

    primary  go to state 79


state 43
=======
    ID   schiebe und gehe zu Zustand 78 über
    NUM  schiebe und gehe zu Zustand 31 über

    primary  gehe zu Zustand 79 über


Zustand 43
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   60              | ID PARA_OPEN .  [PARA_CLOSE]
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression
   63                         | ID PARA_OPEN . expression

<<<<<<< HEAD
    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    MINUS        shift, and go to state 33
    PARA_OPEN    shift, and go to state 34
=======
    ID           schiebe und gehe zu Zustand 30 über
    NUM          schiebe und gehe zu Zustand 31 über
    LOGICAL_NOT  schiebe und gehe zu Zustand 32 über
    MINUS        schiebe und gehe zu Zustand 33 über
    PARA_OPEN    schiebe und gehe zu Zustand 34 über
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

    $default  reduziere mit Regel 60 (function_call)

<<<<<<< HEAD
    expression                go to state 80
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38
=======
    expression                gehe zu Zustand 80 über
    primary                   gehe zu Zustand 36 über
    function_call             gehe zu Zustand 37 über
    function_call_parameters  gehe zu Zustand 38 über
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074


Zustand 44

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   41           | LOGICAL_NOT expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, BRACKET_CLOSE, PARA_CLOSE]
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

<<<<<<< HEAD
    EQ     shift, and go to state 50
    NE     shift, and go to state 51
    LS     shift, and go to state 52
    LSEQ   shift, and go to state 53
    GTEQ   shift, and go to state 54
    GT     shift, and go to state 55
    PLUS   shift, and go to state 56
    MINUS  shift, and go to state 57
    MUL    shift, and go to state 58
    DIV    shift, and go to state 59
    MOD    shift, and go to state 60

    $default  reduce using rule 41 (expression)

    Conflict between rule 41 and token ASSIGN resolved as reduce (ASSIGN < LOGICAL_NOT).
    Conflict between rule 41 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < LOGICAL_NOT).
    Conflict between rule 41 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < LOGICAL_NOT).
    Conflict between rule 41 and token EQ resolved as shift (LOGICAL_NOT < EQ).
    Conflict between rule 41 and token NE resolved as shift (LOGICAL_NOT < NE).
    Conflict between rule 41 and token LS resolved as shift (LOGICAL_NOT < LS).
    Conflict between rule 41 and token LSEQ resolved as shift (LOGICAL_NOT < LSEQ).
    Conflict between rule 41 and token GTEQ resolved as shift (LOGICAL_NOT < GTEQ).
    Conflict between rule 41 and token GT resolved as shift (LOGICAL_NOT < GT).
    Conflict between rule 41 and token PLUS resolved as shift (LOGICAL_NOT < PLUS).
    Conflict between rule 41 and token MINUS resolved as shift (LOGICAL_NOT < MINUS).
    Conflict between rule 41 and token MUL resolved as shift (LOGICAL_NOT < MUL).
    Conflict between rule 41 and token DIV resolved as shift (LOGICAL_NOT < DIV).
    Conflict between rule 41 and token MOD resolved as shift (LOGICAL_NOT < MOD).


state 45

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression
   53           | MINUS expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, EQ, NE, LS, LSEQ, GTEQ, GT, PLUS, MINUS, MUL, DIV, MOD, BRACKET_CLOSE, PARA_CLOSE]

    $default  reduce using rule 53 (expression)

    Conflict between rule 53 and token ASSIGN resolved as reduce (ASSIGN < UNARY_MINUS).
    Conflict between rule 53 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < UNARY_MINUS).
    Conflict between rule 53 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < UNARY_MINUS).
    Conflict between rule 53 and token EQ resolved as reduce (EQ < UNARY_MINUS).
    Conflict between rule 53 and token NE resolved as reduce (NE < UNARY_MINUS).
    Conflict between rule 53 and token LS resolved as reduce (LS < UNARY_MINUS).
    Conflict between rule 53 and token LSEQ resolved as reduce (LSEQ < UNARY_MINUS).
    Conflict between rule 53 and token GTEQ resolved as reduce (GTEQ < UNARY_MINUS).
    Conflict between rule 53 and token GT resolved as reduce (GT < UNARY_MINUS).
    Conflict between rule 53 and token PLUS resolved as reduce (PLUS < UNARY_MINUS).
    Conflict between rule 53 and token MINUS resolved as reduce (MINUS < UNARY_MINUS).
    Conflict between rule 53 and token MUL resolved as reduce (MUL < UNARY_MINUS).
    Conflict between rule 53 and token DIV resolved as reduce (DIV < UNARY_MINUS).
    Conflict between rule 53 and token MOD resolved as reduce (MOD < UNARY_MINUS).
=======
    EQ     schiebe und gehe zu Zustand 50 über
    NE     schiebe und gehe zu Zustand 51 über
    LS     schiebe und gehe zu Zustand 52 über
    LSEQ   schiebe und gehe zu Zustand 53 über
    GTEQ   schiebe und gehe zu Zustand 54 über
    GT     schiebe und gehe zu Zustand 55 über
    PLUS   schiebe und gehe zu Zustand 56 über
    MINUS  schiebe und gehe zu Zustand 57 über
    MUL    schiebe und gehe zu Zustand 58 über
    DIV    schiebe und gehe zu Zustand 59 über
    MOD    schiebe und gehe zu Zustand 60 über

    $default  reduziere mit Regel 41 (expression)

    Konflikt zwischen Regel 41 and Token ASSIGN wurde durch Reduzierung gelöst (ASSIGN < LOGICAL_NOT).
    Konflikt zwischen Regel 41 and Token LOGICAL_OR wurde durch Reduzierung gelöst (LOGICAL_OR < LOGICAL_NOT).
    Konflikt zwischen Regel 41 and Token LOGICAL_AND wurde durch Reduzierung gelöst (LOGICAL_AND < LOGICAL_NOT).
    Konflikt zwischen Regel 41 and Token EQ wurde durch Schieben gelöst (LOGICAL_NOT < EQ).
    Konflikt zwischen Regel 41 and Token NE wurde durch Schieben gelöst (LOGICAL_NOT < NE).
    Konflikt zwischen Regel 41 and Token LS wurde durch Schieben gelöst (LOGICAL_NOT < LS).
    Konflikt zwischen Regel 41 and Token LSEQ wurde durch Schieben gelöst (LOGICAL_NOT < LSEQ).
    Konflikt zwischen Regel 41 and Token GTEQ wurde durch Schieben gelöst (LOGICAL_NOT < GTEQ).
    Konflikt zwischen Regel 41 and Token GT wurde durch Schieben gelöst (LOGICAL_NOT < GT).
    Konflikt zwischen Regel 41 and Token PLUS wurde durch Schieben gelöst (LOGICAL_NOT < PLUS).
    Konflikt zwischen Regel 41 and Token MINUS wurde durch Schieben gelöst (LOGICAL_NOT < MINUS).
    Konflikt zwischen Regel 41 and Token MUL wurde durch Schieben gelöst (LOGICAL_NOT < MUL).
    Konflikt zwischen Regel 41 and Token DIV wurde durch Schieben gelöst (LOGICAL_NOT < DIV).
    Konflikt zwischen Regel 41 and Token MOD wurde durch Schieben gelöst (LOGICAL_NOT < MOD).


Zustand 45
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074


<<<<<<< HEAD
state 46
=======
    $default  reduziere mit Regel 53 (expression)

    Konflikt zwischen Regel 53 and Token ASSIGN wurde durch Reduzierung gelöst (ASSIGN < UNARY_MINUS).
    Konflikt zwischen Regel 53 and Token LOGICAL_OR wurde durch Reduzierung gelöst (LOGICAL_OR < UNARY_MINUS).
    Konflikt zwischen Regel 53 and Token LOGICAL_AND wurde durch Reduzierung gelöst (LOGICAL_AND < UNARY_MINUS).
    Konflikt zwischen Regel 53 and Token EQ wurde durch Reduzierung gelöst (EQ < UNARY_MINUS).
    Konflikt zwischen Regel 53 and Token NE wurde durch Reduzierung gelöst (NE < UNARY_MINUS).
    Konflikt zwischen Regel 53 and Token LS wurde durch Reduzierung gelöst (LS < UNARY_MINUS).
    Konflikt zwischen Regel 53 and Token LSEQ wurde durch Reduzierung gelöst (LSEQ < UNARY_MINUS).
    Konflikt zwischen Regel 53 and Token GTEQ wurde durch Reduzierung gelöst (GTEQ < UNARY_MINUS).
    Konflikt zwischen Regel 53 and Token GT wurde durch Reduzierung gelöst (GT < UNARY_MINUS).
    Konflikt zwischen Regel 53 and Token PLUS wurde durch Reduzierung gelöst (PLUS < UNARY_MINUS).
    Konflikt zwischen Regel 53 and Token MINUS wurde durch Reduzierung gelöst (MINUS < UNARY_MINUS).
    Konflikt zwischen Regel 53 and Token MUL wurde durch Reduzierung gelöst (MUL < UNARY_MINUS).
    Konflikt zwischen Regel 53 and Token DIV wurde durch Reduzierung gelöst (DIV < UNARY_MINUS).
    Konflikt zwischen Regel 53 and Token MOD wurde durch Reduzierung gelöst (MOD < UNARY_MINUS).


Zustand 46
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression
   55           | PARA_OPEN expression . PARA_CLOSE

<<<<<<< HEAD
    ASSIGN       shift, and go to state 47
    LOGICAL_OR   shift, and go to state 48
    LOGICAL_AND  shift, and go to state 49
    EQ           shift, and go to state 50
    NE           shift, and go to state 51
    LS           shift, and go to state 52
    LSEQ         shift, and go to state 53
    GTEQ         shift, and go to state 54
    GT           shift, and go to state 55
    PLUS         shift, and go to state 56
    MINUS        shift, and go to state 57
    MUL          shift, and go to state 58
    DIV          shift, and go to state 59
    MOD          shift, and go to state 60
    PARA_CLOSE   shift, and go to state 81


state 47
=======
    ASSIGN       schiebe und gehe zu Zustand 47 über
    LOGICAL_OR   schiebe und gehe zu Zustand 48 über
    LOGICAL_AND  schiebe und gehe zu Zustand 49 über
    EQ           schiebe und gehe zu Zustand 50 über
    NE           schiebe und gehe zu Zustand 51 über
    LS           schiebe und gehe zu Zustand 52 über
    LSEQ         schiebe und gehe zu Zustand 53 über
    GTEQ         schiebe und gehe zu Zustand 54 über
    GT           schiebe und gehe zu Zustand 55 über
    PLUS         schiebe und gehe zu Zustand 56 über
    MINUS        schiebe und gehe zu Zustand 57 über
    MUL          schiebe und gehe zu Zustand 58 über
    DIV          schiebe und gehe zu Zustand 59 über
    MOD          schiebe und gehe zu Zustand 60 über
    PARA_CLOSE   schiebe und gehe zu Zustand 81 über


Zustand 47
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

   38 expression: . expression ASSIGN expression
   38           | expression ASSIGN . expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

<<<<<<< HEAD
    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    MINUS        shift, and go to state 33
    PARA_OPEN    shift, and go to state 34
=======
    ID           schiebe und gehe zu Zustand 30 über
    NUM          schiebe und gehe zu Zustand 31 über
    LOGICAL_NOT  schiebe und gehe zu Zustand 32 über
    MINUS        schiebe und gehe zu Zustand 33 über
    PARA_OPEN    schiebe und gehe zu Zustand 34 über
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

    expression                gehe zu Zustand 82 über
    primary                   gehe zu Zustand 36 über
    function_call             gehe zu Zustand 37 über
    function_call_parameters  gehe zu Zustand 38 über


Zustand 48

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   39           | expression LOGICAL_OR . expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

<<<<<<< HEAD
    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    MINUS        shift, and go to state 33
    PARA_OPEN    shift, and go to state 34
=======
    ID           schiebe und gehe zu Zustand 30 über
    NUM          schiebe und gehe zu Zustand 31 über
    LOGICAL_NOT  schiebe und gehe zu Zustand 32 über
    MINUS        schiebe und gehe zu Zustand 33 über
    PARA_OPEN    schiebe und gehe zu Zustand 34 über
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

    expression                gehe zu Zustand 83 über
    primary                   gehe zu Zustand 36 über
    function_call             gehe zu Zustand 37 über
    function_call_parameters  gehe zu Zustand 38 über


Zustand 49

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   40           | expression LOGICAL_AND . expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

<<<<<<< HEAD
    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    MINUS        shift, and go to state 33
    PARA_OPEN    shift, and go to state 34
=======
    ID           schiebe und gehe zu Zustand 30 über
    NUM          schiebe und gehe zu Zustand 31 über
    LOGICAL_NOT  schiebe und gehe zu Zustand 32 über
    MINUS        schiebe und gehe zu Zustand 33 über
    PARA_OPEN    schiebe und gehe zu Zustand 34 über
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

    expression                gehe zu Zustand 84 über
    primary                   gehe zu Zustand 36 über
    function_call             gehe zu Zustand 37 über
    function_call_parameters  gehe zu Zustand 38 über


<<<<<<< HEAD
state 50
=======
Zustand 50
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   42           | expression EQ . expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

<<<<<<< HEAD
    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    MINUS        shift, and go to state 33
    PARA_OPEN    shift, and go to state 34
=======
    ID           schiebe und gehe zu Zustand 30 über
    NUM          schiebe und gehe zu Zustand 31 über
    LOGICAL_NOT  schiebe und gehe zu Zustand 32 über
    MINUS        schiebe und gehe zu Zustand 33 über
    PARA_OPEN    schiebe und gehe zu Zustand 34 über

    expression                gehe zu Zustand 85 über
    primary                   gehe zu Zustand 36 über
    function_call             gehe zu Zustand 37 über
    function_call_parameters  gehe zu Zustand 38 über


Zustand 51

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   43           | expression NE . expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    ID           schiebe und gehe zu Zustand 30 über
    NUM          schiebe und gehe zu Zustand 31 über
    LOGICAL_NOT  schiebe und gehe zu Zustand 32 über
    MINUS        schiebe und gehe zu Zustand 33 über
    PARA_OPEN    schiebe und gehe zu Zustand 34 über
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

    expression                gehe zu Zustand 86 über
    primary                   gehe zu Zustand 36 über
    function_call             gehe zu Zustand 37 über
    function_call_parameters  gehe zu Zustand 38 über


<<<<<<< HEAD
state 51

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   43           | expression NE . expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    MINUS        shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    expression                go to state 86
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 52
=======
Zustand 52
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   44           | expression LS . expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

<<<<<<< HEAD
    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    MINUS        shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    expression                go to state 87
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 53
=======
    ID           schiebe und gehe zu Zustand 30 über
    NUM          schiebe und gehe zu Zustand 31 über
    LOGICAL_NOT  schiebe und gehe zu Zustand 32 über
    MINUS        schiebe und gehe zu Zustand 33 über
    PARA_OPEN    schiebe und gehe zu Zustand 34 über

    expression                gehe zu Zustand 87 über
    primary                   gehe zu Zustand 36 über
    function_call             gehe zu Zustand 37 über
    function_call_parameters  gehe zu Zustand 38 über


Zustand 53
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   45           | expression LSEQ . expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

<<<<<<< HEAD
    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    MINUS        shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    expression                go to state 88
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38
=======
    ID           schiebe und gehe zu Zustand 30 über
    NUM          schiebe und gehe zu Zustand 31 über
    LOGICAL_NOT  schiebe und gehe zu Zustand 32 über
    MINUS        schiebe und gehe zu Zustand 33 über
    PARA_OPEN    schiebe und gehe zu Zustand 34 über

    expression                gehe zu Zustand 88 über
    primary                   gehe zu Zustand 36 über
    function_call             gehe zu Zustand 37 über
    function_call_parameters  gehe zu Zustand 38 über


Zustand 54

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   46           | expression GTEQ . expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    ID           schiebe und gehe zu Zustand 30 über
    NUM          schiebe und gehe zu Zustand 31 über
    LOGICAL_NOT  schiebe und gehe zu Zustand 32 über
    MINUS        schiebe und gehe zu Zustand 33 über
    PARA_OPEN    schiebe und gehe zu Zustand 34 über

    expression                gehe zu Zustand 89 über
    primary                   gehe zu Zustand 36 über
    function_call             gehe zu Zustand 37 über
    function_call_parameters  gehe zu Zustand 38 über

>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074


<<<<<<< HEAD
state 54

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   46           | expression GTEQ . expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    MINUS        shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    expression                go to state 89
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 55

=======
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   47           | expression GT . expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

<<<<<<< HEAD
    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    MINUS        shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    expression                go to state 90
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 56
=======
    ID           schiebe und gehe zu Zustand 30 über
    NUM          schiebe und gehe zu Zustand 31 über
    LOGICAL_NOT  schiebe und gehe zu Zustand 32 über
    MINUS        schiebe und gehe zu Zustand 33 über
    PARA_OPEN    schiebe und gehe zu Zustand 34 über

    expression                gehe zu Zustand 90 über
    primary                   gehe zu Zustand 36 über
    function_call             gehe zu Zustand 37 über
    function_call_parameters  gehe zu Zustand 38 über


Zustand 56
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   48           | expression PLUS . expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

<<<<<<< HEAD
    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    MINUS        shift, and go to state 33
    PARA_OPEN    shift, and go to state 34
=======
    ID           schiebe und gehe zu Zustand 30 über
    NUM          schiebe und gehe zu Zustand 31 über
    LOGICAL_NOT  schiebe und gehe zu Zustand 32 über
    MINUS        schiebe und gehe zu Zustand 33 über
    PARA_OPEN    schiebe und gehe zu Zustand 34 über

    expression                gehe zu Zustand 91 über
    primary                   gehe zu Zustand 36 über
    function_call             gehe zu Zustand 37 über
    function_call_parameters  gehe zu Zustand 38 über


Zustand 57

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   49           | expression MINUS . expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    ID           schiebe und gehe zu Zustand 30 über
    NUM          schiebe und gehe zu Zustand 31 über
    LOGICAL_NOT  schiebe und gehe zu Zustand 32 über
    MINUS        schiebe und gehe zu Zustand 33 über
    PARA_OPEN    schiebe und gehe zu Zustand 34 über
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

    expression                gehe zu Zustand 92 über
    primary                   gehe zu Zustand 36 über
    function_call             gehe zu Zustand 37 über
    function_call_parameters  gehe zu Zustand 38 über


Zustand 58

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

<<<<<<< HEAD
    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    MINUS        shift, and go to state 33
    PARA_OPEN    shift, and go to state 34
=======
    ID           schiebe und gehe zu Zustand 30 über
    NUM          schiebe und gehe zu Zustand 31 über
    LOGICAL_NOT  schiebe und gehe zu Zustand 32 über
    MINUS        schiebe und gehe zu Zustand 33 über
    PARA_OPEN    schiebe und gehe zu Zustand 34 über

    expression                gehe zu Zustand 93 über
    primary                   gehe zu Zustand 36 über
    function_call             gehe zu Zustand 37 über
    function_call_parameters  gehe zu Zustand 38 über


Zustand 59

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   51           | expression DIV . expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    ID           schiebe und gehe zu Zustand 30 über
    NUM          schiebe und gehe zu Zustand 31 über
    LOGICAL_NOT  schiebe und gehe zu Zustand 32 über
    MINUS        schiebe und gehe zu Zustand 33 über
    PARA_OPEN    schiebe und gehe zu Zustand 34 über
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

    expression                gehe zu Zustand 94 über
    primary                   gehe zu Zustand 36 über
    function_call             gehe zu Zustand 37 über
    function_call_parameters  gehe zu Zustand 38 über


Zustand 60

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   50           | expression MUL . expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

<<<<<<< HEAD
    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    MINUS        shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    expression                go to state 93
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 59

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   51           | expression DIV . expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    MINUS        shift, and go to state 33
    PARA_OPEN    shift, and go to state 34
=======
    ID           schiebe und gehe zu Zustand 30 über
    NUM          schiebe und gehe zu Zustand 31 über
    LOGICAL_NOT  schiebe und gehe zu Zustand 32 über
    MINUS        schiebe und gehe zu Zustand 33 über
    PARA_OPEN    schiebe und gehe zu Zustand 34 über
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

    expression                gehe zu Zustand 95 über
    primary                   gehe zu Zustand 36 über
    function_call             gehe zu Zustand 37 über
    function_call_parameters  gehe zu Zustand 38 über


Zustand 61

   13 identifier_declaration: identifier_declaration BRACKET_OPEN expression BRACKET_CLOSE .

    $default  reduziere mit Regel 13 (identifier_declaration)


Zustand 62

   56 expression: function_call PARA_CLOSE .

    $default  reduziere mit Regel 56 (expression)


Zustand 63

   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   62                         | function_call_parameters COMMA . expression
   63                         | . ID PARA_OPEN expression

<<<<<<< HEAD
    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    MINUS        shift, and go to state 33
    PARA_OPEN    shift, and go to state 34
=======
    ID           schiebe und gehe zu Zustand 30 über
    NUM          schiebe und gehe zu Zustand 31 über
    LOGICAL_NOT  schiebe und gehe zu Zustand 32 über
    MINUS        schiebe und gehe zu Zustand 33 über
    PARA_OPEN    schiebe und gehe zu Zustand 34 über
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

    expression                gehe zu Zustand 96 über
    primary                   gehe zu Zustand 36 über
    function_call             gehe zu Zustand 37 über
    function_call_parameters  gehe zu Zustand 38 über


Zustand 64

    7 type: . INT
    8     | . VOID
    9 declaration: . declaration COMMA declaration_element
   10            | . type declaration_element
   25 stmt: . stmt_block
   26     | . declaration SEMICOLON
   27     | . expression SEMICOLON
   28     | . stmt_conditional
   29     | . stmt_loop
   30     | . RETURN expression SEMICOLON
   31     | . RETURN SEMICOLON
   32     | . SEMICOLON
   33 stmt_block: . BRACE_OPEN stmt_list BRACE_CLOSE
   34 stmt_conditional: . IF PARA_OPEN expression PARA_CLOSE stmt
   35                 | . IF PARA_OPEN expression PARA_CLOSE stmt ELSE stmt
   36 stmt_loop: . WHILE PARA_OPEN expression PARA_CLOSE stmt
   37          | . DO stmt WHILE PARA_OPEN expression PARA_CLOSE SEMICOLON
   37          | DO . stmt WHILE PARA_OPEN expression PARA_CLOSE SEMICOLON
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

<<<<<<< HEAD
    DO           shift, and go to state 64
    WHILE        shift, and go to state 65
    IF           shift, and go to state 66
    INT          shift, and go to state 1
    VOID         shift, and go to state 2
    RETURN       shift, and go to state 67
    SEMICOLON    shift, and go to state 68
    BRACE_OPEN   shift, and go to state 69
    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    MINUS        shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    type                      go to state 71
    declaration               go to state 72
    stmt                      go to state 97
    stmt_block                go to state 74
    stmt_conditional          go to state 75
    stmt_loop                 go to state 76
    expression                go to state 77
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 65
=======
    DO           schiebe und gehe zu Zustand 64 über
    WHILE        schiebe und gehe zu Zustand 65 über
    IF           schiebe und gehe zu Zustand 66 über
    INT          schiebe und gehe zu Zustand 1 über
    VOID         schiebe und gehe zu Zustand 2 über
    RETURN       schiebe und gehe zu Zustand 67 über
    SEMICOLON    schiebe und gehe zu Zustand 68 über
    BRACE_OPEN   schiebe und gehe zu Zustand 69 über
    ID           schiebe und gehe zu Zustand 30 über
    NUM          schiebe und gehe zu Zustand 31 über
    LOGICAL_NOT  schiebe und gehe zu Zustand 32 über
    MINUS        schiebe und gehe zu Zustand 33 über
    PARA_OPEN    schiebe und gehe zu Zustand 34 über

    type                      gehe zu Zustand 71 über
    declaration               gehe zu Zustand 72 über
    stmt                      gehe zu Zustand 97 über
    stmt_block                gehe zu Zustand 74 über
    stmt_conditional          gehe zu Zustand 75 über
    stmt_loop                 gehe zu Zustand 76 über
    expression                gehe zu Zustand 77 über
    primary                   gehe zu Zustand 36 über
    function_call             gehe zu Zustand 37 über
    function_call_parameters  gehe zu Zustand 38 über


Zustand 65
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

   36 stmt_loop: WHILE . PARA_OPEN expression PARA_CLOSE stmt

    PARA_OPEN  schiebe und gehe zu Zustand 98 über


Zustand 66

   34 stmt_conditional: IF . PARA_OPEN expression PARA_CLOSE stmt
   35                 | IF . PARA_OPEN expression PARA_CLOSE stmt ELSE stmt

    PARA_OPEN  schiebe und gehe zu Zustand 99 über


Zustand 67

   30 stmt: RETURN . expression SEMICOLON
   31     | RETURN . SEMICOLON
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

<<<<<<< HEAD
    SEMICOLON    shift, and go to state 100
    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    MINUS        shift, and go to state 33
    PARA_OPEN    shift, and go to state 34
=======
    SEMICOLON    schiebe und gehe zu Zustand 100 über
    ID           schiebe und gehe zu Zustand 30 über
    NUM          schiebe und gehe zu Zustand 31 über
    LOGICAL_NOT  schiebe und gehe zu Zustand 32 über
    MINUS        schiebe und gehe zu Zustand 33 über
    PARA_OPEN    schiebe und gehe zu Zustand 34 über
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

    expression                gehe zu Zustand 101 über
    primary                   gehe zu Zustand 36 über
    function_call             gehe zu Zustand 37 über
    function_call_parameters  gehe zu Zustand 38 über


Zustand 68

   32 stmt: SEMICOLON .

    $default  reduziere mit Regel 32 (stmt)


Zustand 69

   23 stmt_list: .
   24          | . stmt_list stmt
   33 stmt_block: BRACE_OPEN . stmt_list BRACE_CLOSE

    $default  reduziere mit Regel 23 (stmt_list)

    stmt_list  gehe zu Zustand 102 über


Zustand 70

   15 function_definition: type function_header BRACE_OPEN stmt_list BRACE_CLOSE .

    $default  reduziere mit Regel 15 (function_definition)


Zustand 71

   10 declaration: type . declaration_element
   11 declaration_element: . identifier_declaration
   12                    | . function_header
   13 identifier_declaration: . identifier_declaration BRACKET_OPEN expression BRACKET_CLOSE
   14                       | . ID
   16 function_header: . function_prefix PARA_CLOSE
   17 function_prefix: . function_signature
   18                | . function_signature_parameters
   19 function_signature: . identifier_declaration PARA_OPEN
   20 function_signature_parameters: . function_signature_parameters COMMA function_parameter_element
   21                              | . function_signature function_parameter_element

    ID  schiebe und gehe zu Zustand 12 über

    declaration_element            gehe zu Zustand 13 über
    identifier_declaration         gehe zu Zustand 14 über
    function_header                gehe zu Zustand 29 über
    function_prefix                gehe zu Zustand 16 über
    function_signature             gehe zu Zustand 17 über
    function_signature_parameters  gehe zu Zustand 18 über


Zustand 72

    9 declaration: declaration . COMMA declaration_element
   26 stmt: declaration . SEMICOLON

    COMMA      schiebe und gehe zu Zustand 19 über
    SEMICOLON  schiebe und gehe zu Zustand 103 über


Zustand 73

   24 stmt_list: stmt_list stmt .

    $default  reduziere mit Regel 24 (stmt_list)


Zustand 74

   25 stmt: stmt_block .

    $default  reduziere mit Regel 25 (stmt)


Zustand 75

   28 stmt: stmt_conditional .

    $default  reduziere mit Regel 28 (stmt)


Zustand 76

   29 stmt: stmt_loop .

    $default  reduziere mit Regel 29 (stmt)


Zustand 77

   27 stmt: expression . SEMICOLON
   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

<<<<<<< HEAD
    SEMICOLON    shift, and go to state 104
    ASSIGN       shift, and go to state 47
    LOGICAL_OR   shift, and go to state 48
    LOGICAL_AND  shift, and go to state 49
    EQ           shift, and go to state 50
    NE           shift, and go to state 51
    LS           shift, and go to state 52
    LSEQ         shift, and go to state 53
    GTEQ         shift, and go to state 54
    GT           shift, and go to state 55
    PLUS         shift, and go to state 56
    MINUS        shift, and go to state 57
    MUL          shift, and go to state 58
    DIV          shift, and go to state 59
    MOD          shift, and go to state 60


state 78

   59 primary: ID .

    $default  reduce using rule 59 (primary)


state 79

   54 expression: ID BRACKET_OPEN primary . BRACKET_CLOSE

    BRACKET_CLOSE  shift, and go to state 105


state 80
=======
    SEMICOLON    schiebe und gehe zu Zustand 104 über
    ASSIGN       schiebe und gehe zu Zustand 47 über
    LOGICAL_OR   schiebe und gehe zu Zustand 48 über
    LOGICAL_AND  schiebe und gehe zu Zustand 49 über
    EQ           schiebe und gehe zu Zustand 50 über
    NE           schiebe und gehe zu Zustand 51 über
    LS           schiebe und gehe zu Zustand 52 über
    LSEQ         schiebe und gehe zu Zustand 53 über
    GTEQ         schiebe und gehe zu Zustand 54 über
    GT           schiebe und gehe zu Zustand 55 über
    PLUS         schiebe und gehe zu Zustand 56 über
    MINUS        schiebe und gehe zu Zustand 57 über
    MUL          schiebe und gehe zu Zustand 58 über
    DIV          schiebe und gehe zu Zustand 59 über
    MOD          schiebe und gehe zu Zustand 60 über


Zustand 78

   59 primary: ID .

    $default  reduziere mit Regel 59 (primary)


Zustand 79

   54 expression: ID BRACKET_OPEN primary . BRACKET_CLOSE

    BRACKET_CLOSE  schiebe und gehe zu Zustand 105 über


Zustand 80
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression
   63 function_call_parameters: ID PARA_OPEN expression .  [COMMA, PARA_CLOSE]

<<<<<<< HEAD
    ASSIGN       shift, and go to state 47
    LOGICAL_OR   shift, and go to state 48
    LOGICAL_AND  shift, and go to state 49
    EQ           shift, and go to state 50
    NE           shift, and go to state 51
    LS           shift, and go to state 52
    LSEQ         shift, and go to state 53
    GTEQ         shift, and go to state 54
    GT           shift, and go to state 55
    PLUS         shift, and go to state 56
    MINUS        shift, and go to state 57
    MUL          shift, and go to state 58
    DIV          shift, and go to state 59
    MOD          shift, and go to state 60

    $default  reduce using rule 63 (function_call_parameters)


state 81
=======
    ASSIGN       schiebe und gehe zu Zustand 47 über
    LOGICAL_OR   schiebe und gehe zu Zustand 48 über
    LOGICAL_AND  schiebe und gehe zu Zustand 49 über
    EQ           schiebe und gehe zu Zustand 50 über
    NE           schiebe und gehe zu Zustand 51 über
    LS           schiebe und gehe zu Zustand 52 über
    LSEQ         schiebe und gehe zu Zustand 53 über
    GTEQ         schiebe und gehe zu Zustand 54 über
    GT           schiebe und gehe zu Zustand 55 über
    PLUS         schiebe und gehe zu Zustand 56 über
    MINUS        schiebe und gehe zu Zustand 57 über
    MUL          schiebe und gehe zu Zustand 58 über
    DIV          schiebe und gehe zu Zustand 59 über
    MOD          schiebe und gehe zu Zustand 60 über

    $default  reduziere mit Regel 63 (function_call_parameters)


Zustand 81
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

   55 expression: PARA_OPEN expression PARA_CLOSE .

    $default  reduziere mit Regel 55 (expression)


Zustand 82

   38 expression: expression . ASSIGN expression
   38           | expression ASSIGN expression .  [COMMA, SEMICOLON, BRACKET_CLOSE, PARA_CLOSE]
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

<<<<<<< HEAD
    ASSIGN       shift, and go to state 47
    LOGICAL_OR   shift, and go to state 48
    LOGICAL_AND  shift, and go to state 49
    EQ           shift, and go to state 50
    NE           shift, and go to state 51
    LS           shift, and go to state 52
    LSEQ         shift, and go to state 53
    GTEQ         shift, and go to state 54
    GT           shift, and go to state 55
    PLUS         shift, and go to state 56
    MINUS        shift, and go to state 57
    MUL          shift, and go to state 58
    DIV          shift, and go to state 59
    MOD          shift, and go to state 60

    $default  reduce using rule 38 (expression)

    Conflict between rule 38 and token ASSIGN resolved as shift (%right ASSIGN).
    Conflict between rule 38 and token LOGICAL_OR resolved as shift (ASSIGN < LOGICAL_OR).
    Conflict between rule 38 and token LOGICAL_AND resolved as shift (ASSIGN < LOGICAL_AND).
    Conflict between rule 38 and token EQ resolved as shift (ASSIGN < EQ).
    Conflict between rule 38 and token NE resolved as shift (ASSIGN < NE).
    Conflict between rule 38 and token LS resolved as shift (ASSIGN < LS).
    Conflict between rule 38 and token LSEQ resolved as shift (ASSIGN < LSEQ).
    Conflict between rule 38 and token GTEQ resolved as shift (ASSIGN < GTEQ).
    Conflict between rule 38 and token GT resolved as shift (ASSIGN < GT).
    Conflict between rule 38 and token PLUS resolved as shift (ASSIGN < PLUS).
    Conflict between rule 38 and token MINUS resolved as shift (ASSIGN < MINUS).
    Conflict between rule 38 and token MUL resolved as shift (ASSIGN < MUL).
    Conflict between rule 38 and token DIV resolved as shift (ASSIGN < DIV).
    Conflict between rule 38 and token MOD resolved as shift (ASSIGN < MOD).


state 83
=======
    ASSIGN       schiebe und gehe zu Zustand 47 über
    LOGICAL_OR   schiebe und gehe zu Zustand 48 über
    LOGICAL_AND  schiebe und gehe zu Zustand 49 über
    EQ           schiebe und gehe zu Zustand 50 über
    NE           schiebe und gehe zu Zustand 51 über
    LS           schiebe und gehe zu Zustand 52 über
    LSEQ         schiebe und gehe zu Zustand 53 über
    GTEQ         schiebe und gehe zu Zustand 54 über
    GT           schiebe und gehe zu Zustand 55 über
    PLUS         schiebe und gehe zu Zustand 56 über
    MINUS        schiebe und gehe zu Zustand 57 über
    MUL          schiebe und gehe zu Zustand 58 über
    DIV          schiebe und gehe zu Zustand 59 über
    MOD          schiebe und gehe zu Zustand 60 über

    $default  reduziere mit Regel 38 (expression)

    Konflikt zwischen Regel 38 and Token ASSIGN wurde durch Schieben gelöst (%right ASSIGN).
    Konflikt zwischen Regel 38 and Token LOGICAL_OR wurde durch Schieben gelöst (ASSIGN < LOGICAL_OR).
    Konflikt zwischen Regel 38 and Token LOGICAL_AND wurde durch Schieben gelöst (ASSIGN < LOGICAL_AND).
    Konflikt zwischen Regel 38 and Token EQ wurde durch Schieben gelöst (ASSIGN < EQ).
    Konflikt zwischen Regel 38 and Token NE wurde durch Schieben gelöst (ASSIGN < NE).
    Konflikt zwischen Regel 38 and Token LS wurde durch Schieben gelöst (ASSIGN < LS).
    Konflikt zwischen Regel 38 and Token LSEQ wurde durch Schieben gelöst (ASSIGN < LSEQ).
    Konflikt zwischen Regel 38 and Token GTEQ wurde durch Schieben gelöst (ASSIGN < GTEQ).
    Konflikt zwischen Regel 38 and Token GT wurde durch Schieben gelöst (ASSIGN < GT).
    Konflikt zwischen Regel 38 and Token PLUS wurde durch Schieben gelöst (ASSIGN < PLUS).
    Konflikt zwischen Regel 38 and Token MINUS wurde durch Schieben gelöst (ASSIGN < MINUS).
    Konflikt zwischen Regel 38 and Token MUL wurde durch Schieben gelöst (ASSIGN < MUL).
    Konflikt zwischen Regel 38 and Token DIV wurde durch Schieben gelöst (ASSIGN < DIV).
    Konflikt zwischen Regel 38 and Token MOD wurde durch Schieben gelöst (ASSIGN < MOD).


Zustand 83
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   39           | expression LOGICAL_OR expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, BRACKET_CLOSE, PARA_CLOSE]
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

<<<<<<< HEAD
    EQ     shift, and go to state 50
    NE     shift, and go to state 51
    LS     shift, and go to state 52
    LSEQ   shift, and go to state 53
    GTEQ   shift, and go to state 54
    GT     shift, and go to state 55
    PLUS   shift, and go to state 56
    MINUS  shift, and go to state 57
    MUL    shift, and go to state 58
    DIV    shift, and go to state 59
    MOD    shift, and go to state 60

    $default  reduce using rule 39 (expression)

    Conflict between rule 39 and token ASSIGN resolved as reduce (ASSIGN < LOGICAL_OR).
    Conflict between rule 39 and token LOGICAL_OR resolved as reduce (%left LOGICAL_OR).
    Conflict between rule 39 and token LOGICAL_AND resolved as reduce (%left LOGICAL_AND).
    Conflict between rule 39 and token EQ resolved as shift (LOGICAL_OR < EQ).
    Conflict between rule 39 and token NE resolved as shift (LOGICAL_OR < NE).
    Conflict between rule 39 and token LS resolved as shift (LOGICAL_OR < LS).
    Conflict between rule 39 and token LSEQ resolved as shift (LOGICAL_OR < LSEQ).
    Conflict between rule 39 and token GTEQ resolved as shift (LOGICAL_OR < GTEQ).
    Conflict between rule 39 and token GT resolved as shift (LOGICAL_OR < GT).
    Conflict between rule 39 and token PLUS resolved as shift (LOGICAL_OR < PLUS).
    Conflict between rule 39 and token MINUS resolved as shift (LOGICAL_OR < MINUS).
    Conflict between rule 39 and token MUL resolved as shift (LOGICAL_OR < MUL).
    Conflict between rule 39 and token DIV resolved as shift (LOGICAL_OR < DIV).
    Conflict between rule 39 and token MOD resolved as shift (LOGICAL_OR < MOD).


state 84
=======
    EQ     schiebe und gehe zu Zustand 50 über
    NE     schiebe und gehe zu Zustand 51 über
    LS     schiebe und gehe zu Zustand 52 über
    LSEQ   schiebe und gehe zu Zustand 53 über
    GTEQ   schiebe und gehe zu Zustand 54 über
    GT     schiebe und gehe zu Zustand 55 über
    PLUS   schiebe und gehe zu Zustand 56 über
    MINUS  schiebe und gehe zu Zustand 57 über
    MUL    schiebe und gehe zu Zustand 58 über
    DIV    schiebe und gehe zu Zustand 59 über
    MOD    schiebe und gehe zu Zustand 60 über

    $default  reduziere mit Regel 39 (expression)

    Konflikt zwischen Regel 39 and Token ASSIGN wurde durch Reduzierung gelöst (ASSIGN < LOGICAL_OR).
    Konflikt zwischen Regel 39 and Token LOGICAL_OR wurde durch Reduzierung gelöst (%left LOGICAL_OR).
    Konflikt zwischen Regel 39 and Token LOGICAL_AND wurde durch Reduzierung gelöst (%left LOGICAL_AND).
    Konflikt zwischen Regel 39 and Token EQ wurde durch Schieben gelöst (LOGICAL_OR < EQ).
    Konflikt zwischen Regel 39 and Token NE wurde durch Schieben gelöst (LOGICAL_OR < NE).
    Konflikt zwischen Regel 39 and Token LS wurde durch Schieben gelöst (LOGICAL_OR < LS).
    Konflikt zwischen Regel 39 and Token LSEQ wurde durch Schieben gelöst (LOGICAL_OR < LSEQ).
    Konflikt zwischen Regel 39 and Token GTEQ wurde durch Schieben gelöst (LOGICAL_OR < GTEQ).
    Konflikt zwischen Regel 39 and Token GT wurde durch Schieben gelöst (LOGICAL_OR < GT).
    Konflikt zwischen Regel 39 and Token PLUS wurde durch Schieben gelöst (LOGICAL_OR < PLUS).
    Konflikt zwischen Regel 39 and Token MINUS wurde durch Schieben gelöst (LOGICAL_OR < MINUS).
    Konflikt zwischen Regel 39 and Token MUL wurde durch Schieben gelöst (LOGICAL_OR < MUL).
    Konflikt zwischen Regel 39 and Token DIV wurde durch Schieben gelöst (LOGICAL_OR < DIV).
    Konflikt zwischen Regel 39 and Token MOD wurde durch Schieben gelöst (LOGICAL_OR < MOD).


Zustand 84
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   40           | expression LOGICAL_AND expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, BRACKET_CLOSE, PARA_CLOSE]
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

<<<<<<< HEAD
    EQ     shift, and go to state 50
    NE     shift, and go to state 51
    LS     shift, and go to state 52
    LSEQ   shift, and go to state 53
    GTEQ   shift, and go to state 54
    GT     shift, and go to state 55
    PLUS   shift, and go to state 56
    MINUS  shift, and go to state 57
    MUL    shift, and go to state 58
    DIV    shift, and go to state 59
    MOD    shift, and go to state 60

    $default  reduce using rule 40 (expression)

    Conflict between rule 40 and token ASSIGN resolved as reduce (ASSIGN < LOGICAL_AND).
    Conflict between rule 40 and token LOGICAL_OR resolved as reduce (%left LOGICAL_OR).
    Conflict between rule 40 and token LOGICAL_AND resolved as reduce (%left LOGICAL_AND).
    Conflict between rule 40 and token EQ resolved as shift (LOGICAL_AND < EQ).
    Conflict between rule 40 and token NE resolved as shift (LOGICAL_AND < NE).
    Conflict between rule 40 and token LS resolved as shift (LOGICAL_AND < LS).
    Conflict between rule 40 and token LSEQ resolved as shift (LOGICAL_AND < LSEQ).
    Conflict between rule 40 and token GTEQ resolved as shift (LOGICAL_AND < GTEQ).
    Conflict between rule 40 and token GT resolved as shift (LOGICAL_AND < GT).
    Conflict between rule 40 and token PLUS resolved as shift (LOGICAL_AND < PLUS).
    Conflict between rule 40 and token MINUS resolved as shift (LOGICAL_AND < MINUS).
    Conflict between rule 40 and token MUL resolved as shift (LOGICAL_AND < MUL).
    Conflict between rule 40 and token DIV resolved as shift (LOGICAL_AND < DIV).
    Conflict between rule 40 and token MOD resolved as shift (LOGICAL_AND < MOD).


state 85
=======
    EQ     schiebe und gehe zu Zustand 50 über
    NE     schiebe und gehe zu Zustand 51 über
    LS     schiebe und gehe zu Zustand 52 über
    LSEQ   schiebe und gehe zu Zustand 53 über
    GTEQ   schiebe und gehe zu Zustand 54 über
    GT     schiebe und gehe zu Zustand 55 über
    PLUS   schiebe und gehe zu Zustand 56 über
    MINUS  schiebe und gehe zu Zustand 57 über
    MUL    schiebe und gehe zu Zustand 58 über
    DIV    schiebe und gehe zu Zustand 59 über
    MOD    schiebe und gehe zu Zustand 60 über

    $default  reduziere mit Regel 40 (expression)

    Konflikt zwischen Regel 40 and Token ASSIGN wurde durch Reduzierung gelöst (ASSIGN < LOGICAL_AND).
    Konflikt zwischen Regel 40 and Token LOGICAL_OR wurde durch Reduzierung gelöst (%left LOGICAL_OR).
    Konflikt zwischen Regel 40 and Token LOGICAL_AND wurde durch Reduzierung gelöst (%left LOGICAL_AND).
    Konflikt zwischen Regel 40 and Token EQ wurde durch Schieben gelöst (LOGICAL_AND < EQ).
    Konflikt zwischen Regel 40 and Token NE wurde durch Schieben gelöst (LOGICAL_AND < NE).
    Konflikt zwischen Regel 40 and Token LS wurde durch Schieben gelöst (LOGICAL_AND < LS).
    Konflikt zwischen Regel 40 and Token LSEQ wurde durch Schieben gelöst (LOGICAL_AND < LSEQ).
    Konflikt zwischen Regel 40 and Token GTEQ wurde durch Schieben gelöst (LOGICAL_AND < GTEQ).
    Konflikt zwischen Regel 40 and Token GT wurde durch Schieben gelöst (LOGICAL_AND < GT).
    Konflikt zwischen Regel 40 and Token PLUS wurde durch Schieben gelöst (LOGICAL_AND < PLUS).
    Konflikt zwischen Regel 40 and Token MINUS wurde durch Schieben gelöst (LOGICAL_AND < MINUS).
    Konflikt zwischen Regel 40 and Token MUL wurde durch Schieben gelöst (LOGICAL_AND < MUL).
    Konflikt zwischen Regel 40 and Token DIV wurde durch Schieben gelöst (LOGICAL_AND < DIV).
    Konflikt zwischen Regel 40 and Token MOD wurde durch Schieben gelöst (LOGICAL_AND < MOD).


Zustand 85
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   42           | expression EQ expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, EQ, NE, LS, LSEQ, GTEQ, GT, BRACKET_CLOSE, PARA_CLOSE]
<<<<<<< HEAD
=======
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

    PLUS   schiebe und gehe zu Zustand 56 über
    MINUS  schiebe und gehe zu Zustand 57 über
    MUL    schiebe und gehe zu Zustand 58 über
    DIV    schiebe und gehe zu Zustand 59 über
    MOD    schiebe und gehe zu Zustand 60 über

    $default  reduziere mit Regel 42 (expression)

    Konflikt zwischen Regel 42 and Token ASSIGN wurde durch Reduzierung gelöst (ASSIGN < EQ).
    Konflikt zwischen Regel 42 and Token LOGICAL_OR wurde durch Reduzierung gelöst (LOGICAL_OR < EQ).
    Konflikt zwischen Regel 42 and Token LOGICAL_AND wurde durch Reduzierung gelöst (LOGICAL_AND < EQ).
    Konflikt zwischen Regel 42 and Token EQ wurde durch Reduzierung gelöst (%left EQ).
    Konflikt zwischen Regel 42 and Token NE wurde durch Reduzierung gelöst (%left NE).
    Konflikt zwischen Regel 42 and Token LS wurde durch Reduzierung gelöst (%left LS).
    Konflikt zwischen Regel 42 and Token LSEQ wurde durch Reduzierung gelöst (%left LSEQ).
    Konflikt zwischen Regel 42 and Token GTEQ wurde durch Reduzierung gelöst (%left GTEQ).
    Konflikt zwischen Regel 42 and Token GT wurde durch Reduzierung gelöst (%left GT).
    Konflikt zwischen Regel 42 and Token PLUS wurde durch Schieben gelöst (EQ < PLUS).
    Konflikt zwischen Regel 42 and Token MINUS wurde durch Schieben gelöst (EQ < MINUS).
    Konflikt zwischen Regel 42 and Token MUL wurde durch Schieben gelöst (EQ < MUL).
    Konflikt zwischen Regel 42 and Token DIV wurde durch Schieben gelöst (EQ < DIV).
    Konflikt zwischen Regel 42 and Token MOD wurde durch Schieben gelöst (EQ < MOD).


Zustand 86

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

<<<<<<< HEAD
    PLUS   shift, and go to state 56
    MINUS  shift, and go to state 57
    MUL    shift, and go to state 58
    DIV    shift, and go to state 59
    MOD    shift, and go to state 60

    $default  reduce using rule 42 (expression)

    Conflict between rule 42 and token ASSIGN resolved as reduce (ASSIGN < EQ).
    Conflict between rule 42 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < EQ).
    Conflict between rule 42 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < EQ).
    Conflict between rule 42 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 42 and token NE resolved as reduce (%left NE).
    Conflict between rule 42 and token LS resolved as reduce (%left LS).
    Conflict between rule 42 and token LSEQ resolved as reduce (%left LSEQ).
    Conflict between rule 42 and token GTEQ resolved as reduce (%left GTEQ).
    Conflict between rule 42 and token GT resolved as reduce (%left GT).
    Conflict between rule 42 and token PLUS resolved as shift (EQ < PLUS).
    Conflict between rule 42 and token MINUS resolved as shift (EQ < MINUS).
    Conflict between rule 42 and token MUL resolved as shift (EQ < MUL).
    Conflict between rule 42 and token DIV resolved as shift (EQ < DIV).
    Conflict between rule 42 and token MOD resolved as shift (EQ < MOD).


state 86

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   43           | expression NE expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, EQ, NE, LS, LSEQ, GTEQ, GT, BRACKET_CLOSE, PARA_CLOSE]
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

    PLUS   shift, and go to state 56
    MINUS  shift, and go to state 57
    MUL    shift, and go to state 58
    DIV    shift, and go to state 59
    MOD    shift, and go to state 60
=======
    PLUS   schiebe und gehe zu Zustand 56 über
    MINUS  schiebe und gehe zu Zustand 57 über
    MUL    schiebe und gehe zu Zustand 58 über
    DIV    schiebe und gehe zu Zustand 59 über
    MOD    schiebe und gehe zu Zustand 60 über

    $default  reduziere mit Regel 43 (expression)

    Konflikt zwischen Regel 43 and Token ASSIGN wurde durch Reduzierung gelöst (ASSIGN < NE).
    Konflikt zwischen Regel 43 and Token LOGICAL_OR wurde durch Reduzierung gelöst (LOGICAL_OR < NE).
    Konflikt zwischen Regel 43 and Token LOGICAL_AND wurde durch Reduzierung gelöst (LOGICAL_AND < NE).
    Konflikt zwischen Regel 43 and Token EQ wurde durch Reduzierung gelöst (%left EQ).
    Konflikt zwischen Regel 43 and Token NE wurde durch Reduzierung gelöst (%left NE).
    Konflikt zwischen Regel 43 and Token LS wurde durch Reduzierung gelöst (%left LS).
    Konflikt zwischen Regel 43 and Token LSEQ wurde durch Reduzierung gelöst (%left LSEQ).
    Konflikt zwischen Regel 43 and Token GTEQ wurde durch Reduzierung gelöst (%left GTEQ).
    Konflikt zwischen Regel 43 and Token GT wurde durch Reduzierung gelöst (%left GT).
    Konflikt zwischen Regel 43 and Token PLUS wurde durch Schieben gelöst (NE < PLUS).
    Konflikt zwischen Regel 43 and Token MINUS wurde durch Schieben gelöst (NE < MINUS).
    Konflikt zwischen Regel 43 and Token MUL wurde durch Schieben gelöst (NE < MUL).
    Konflikt zwischen Regel 43 and Token DIV wurde durch Schieben gelöst (NE < DIV).
    Konflikt zwischen Regel 43 and Token MOD wurde durch Schieben gelöst (NE < MOD).
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074


Zustand 87

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   44           | expression LS expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, EQ, NE, LS, LSEQ, GTEQ, GT, BRACKET_CLOSE, PARA_CLOSE]
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

<<<<<<< HEAD
    PLUS   shift, and go to state 56
    MINUS  shift, and go to state 57
    MUL    shift, and go to state 58
    DIV    shift, and go to state 59
    MOD    shift, and go to state 60

    $default  reduce using rule 44 (expression)

    Conflict between rule 44 and token ASSIGN resolved as reduce (ASSIGN < LS).
    Conflict between rule 44 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < LS).
    Conflict between rule 44 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < LS).
    Conflict between rule 44 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 44 and token NE resolved as reduce (%left NE).
    Conflict between rule 44 and token LS resolved as reduce (%left LS).
    Conflict between rule 44 and token LSEQ resolved as reduce (%left LSEQ).
    Conflict between rule 44 and token GTEQ resolved as reduce (%left GTEQ).
    Conflict between rule 44 and token GT resolved as reduce (%left GT).
    Conflict between rule 44 and token PLUS resolved as shift (LS < PLUS).
    Conflict between rule 44 and token MINUS resolved as shift (LS < MINUS).
    Conflict between rule 44 and token MUL resolved as shift (LS < MUL).
    Conflict between rule 44 and token DIV resolved as shift (LS < DIV).
    Conflict between rule 44 and token MOD resolved as shift (LS < MOD).


state 88

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   45           | expression LSEQ expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, EQ, NE, LS, LSEQ, GTEQ, GT, BRACKET_CLOSE, PARA_CLOSE]
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

    PLUS   shift, and go to state 56
    MINUS  shift, and go to state 57
    MUL    shift, and go to state 58
    DIV    shift, and go to state 59
    MOD    shift, and go to state 60

    $default  reduce using rule 45 (expression)

    Conflict between rule 45 and token ASSIGN resolved as reduce (ASSIGN < LSEQ).
    Conflict between rule 45 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < LSEQ).
    Conflict between rule 45 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < LSEQ).
    Conflict between rule 45 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 45 and token NE resolved as reduce (%left NE).
    Conflict between rule 45 and token LS resolved as reduce (%left LS).
    Conflict between rule 45 and token LSEQ resolved as reduce (%left LSEQ).
    Conflict between rule 45 and token GTEQ resolved as reduce (%left GTEQ).
    Conflict between rule 45 and token GT resolved as reduce (%left GT).
    Conflict between rule 45 and token PLUS resolved as shift (LSEQ < PLUS).
    Conflict between rule 45 and token MINUS resolved as shift (LSEQ < MINUS).
    Conflict between rule 45 and token MUL resolved as shift (LSEQ < MUL).
    Conflict between rule 45 and token DIV resolved as shift (LSEQ < DIV).
    Conflict between rule 45 and token MOD resolved as shift (LSEQ < MOD).


state 89

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   46           | expression GTEQ expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, EQ, NE, LS, LSEQ, GTEQ, GT, BRACKET_CLOSE, PARA_CLOSE]
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

    PLUS   shift, and go to state 56
    MINUS  shift, and go to state 57
    MUL    shift, and go to state 58
    DIV    shift, and go to state 59
    MOD    shift, and go to state 60

    $default  reduce using rule 46 (expression)

    Conflict between rule 46 and token ASSIGN resolved as reduce (ASSIGN < GTEQ).
    Conflict between rule 46 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < GTEQ).
    Conflict between rule 46 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < GTEQ).
    Conflict between rule 46 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 46 and token NE resolved as reduce (%left NE).
    Conflict between rule 46 and token LS resolved as reduce (%left LS).
    Conflict between rule 46 and token LSEQ resolved as reduce (%left LSEQ).
    Conflict between rule 46 and token GTEQ resolved as reduce (%left GTEQ).
    Conflict between rule 46 and token GT resolved as reduce (%left GT).
    Conflict between rule 46 and token PLUS resolved as shift (GTEQ < PLUS).
    Conflict between rule 46 and token MINUS resolved as shift (GTEQ < MINUS).
    Conflict between rule 46 and token MUL resolved as shift (GTEQ < MUL).
    Conflict between rule 46 and token DIV resolved as shift (GTEQ < DIV).
    Conflict between rule 46 and token MOD resolved as shift (GTEQ < MOD).


state 90

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   47           | expression GT expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, EQ, NE, LS, LSEQ, GTEQ, GT, BRACKET_CLOSE, PARA_CLOSE]
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

    PLUS   shift, and go to state 56
    MINUS  shift, and go to state 57
    MUL    shift, and go to state 58
    DIV    shift, and go to state 59
    MOD    shift, and go to state 60

    $default  reduce using rule 47 (expression)

    Conflict between rule 47 and token ASSIGN resolved as reduce (ASSIGN < GT).
    Conflict between rule 47 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < GT).
    Conflict between rule 47 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < GT).
    Conflict between rule 47 and token EQ resolved as reduce (%left EQ).
    Conflict between rule 47 and token NE resolved as reduce (%left NE).
    Conflict between rule 47 and token LS resolved as reduce (%left LS).
    Conflict between rule 47 and token LSEQ resolved as reduce (%left LSEQ).
    Conflict between rule 47 and token GTEQ resolved as reduce (%left GTEQ).
    Conflict between rule 47 and token GT resolved as reduce (%left GT).
    Conflict between rule 47 and token PLUS resolved as shift (GT < PLUS).
    Conflict between rule 47 and token MINUS resolved as shift (GT < MINUS).
    Conflict between rule 47 and token MUL resolved as shift (GT < MUL).
    Conflict between rule 47 and token DIV resolved as shift (GT < DIV).
    Conflict between rule 47 and token MOD resolved as shift (GT < MOD).


state 91
=======
    PLUS   schiebe und gehe zu Zustand 56 über
    MINUS  schiebe und gehe zu Zustand 57 über
    MUL    schiebe und gehe zu Zustand 58 über
    DIV    schiebe und gehe zu Zustand 59 über
    MOD    schiebe und gehe zu Zustand 60 über

    $default  reduziere mit Regel 44 (expression)

    Konflikt zwischen Regel 44 and Token ASSIGN wurde durch Reduzierung gelöst (ASSIGN < LS).
    Konflikt zwischen Regel 44 and Token LOGICAL_OR wurde durch Reduzierung gelöst (LOGICAL_OR < LS).
    Konflikt zwischen Regel 44 and Token LOGICAL_AND wurde durch Reduzierung gelöst (LOGICAL_AND < LS).
    Konflikt zwischen Regel 44 and Token EQ wurde durch Reduzierung gelöst (%left EQ).
    Konflikt zwischen Regel 44 and Token NE wurde durch Reduzierung gelöst (%left NE).
    Konflikt zwischen Regel 44 and Token LS wurde durch Reduzierung gelöst (%left LS).
    Konflikt zwischen Regel 44 and Token LSEQ wurde durch Reduzierung gelöst (%left LSEQ).
    Konflikt zwischen Regel 44 and Token GTEQ wurde durch Reduzierung gelöst (%left GTEQ).
    Konflikt zwischen Regel 44 and Token GT wurde durch Reduzierung gelöst (%left GT).
    Konflikt zwischen Regel 44 and Token PLUS wurde durch Schieben gelöst (LS < PLUS).
    Konflikt zwischen Regel 44 and Token MINUS wurde durch Schieben gelöst (LS < MINUS).
    Konflikt zwischen Regel 44 and Token MUL wurde durch Schieben gelöst (LS < MUL).
    Konflikt zwischen Regel 44 and Token DIV wurde durch Schieben gelöst (LS < DIV).
    Konflikt zwischen Regel 44 and Token MOD wurde durch Schieben gelöst (LS < MOD).


Zustand 88
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

<<<<<<< HEAD
    $default  reduce using rule 48 (expression)

    Conflict between rule 48 and token ASSIGN resolved as reduce (ASSIGN < PLUS).
    Conflict between rule 48 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < PLUS).
    Conflict between rule 48 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < PLUS).
    Conflict between rule 48 and token EQ resolved as reduce (EQ < PLUS).
    Conflict between rule 48 and token NE resolved as reduce (NE < PLUS).
    Conflict between rule 48 and token LS resolved as reduce (LS < PLUS).
    Conflict between rule 48 and token LSEQ resolved as reduce (LSEQ < PLUS).
    Conflict between rule 48 and token GTEQ resolved as reduce (GTEQ < PLUS).
    Conflict between rule 48 and token GT resolved as reduce (GT < PLUS).
    Conflict between rule 48 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 48 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 48 and token MUL resolved as reduce (%left MUL).
    Conflict between rule 48 and token DIV resolved as reduce (%left DIV).
    Conflict between rule 48 and token MOD resolved as reduce (%left MOD).
=======
    PLUS   schiebe und gehe zu Zustand 56 über
    MINUS  schiebe und gehe zu Zustand 57 über
    MUL    schiebe und gehe zu Zustand 58 über
    DIV    schiebe und gehe zu Zustand 59 über
    MOD    schiebe und gehe zu Zustand 60 über

    $default  reduziere mit Regel 45 (expression)

    Konflikt zwischen Regel 45 and Token ASSIGN wurde durch Reduzierung gelöst (ASSIGN < LSEQ).
    Konflikt zwischen Regel 45 and Token LOGICAL_OR wurde durch Reduzierung gelöst (LOGICAL_OR < LSEQ).
    Konflikt zwischen Regel 45 and Token LOGICAL_AND wurde durch Reduzierung gelöst (LOGICAL_AND < LSEQ).
    Konflikt zwischen Regel 45 and Token EQ wurde durch Reduzierung gelöst (%left EQ).
    Konflikt zwischen Regel 45 and Token NE wurde durch Reduzierung gelöst (%left NE).
    Konflikt zwischen Regel 45 and Token LS wurde durch Reduzierung gelöst (%left LS).
    Konflikt zwischen Regel 45 and Token LSEQ wurde durch Reduzierung gelöst (%left LSEQ).
    Konflikt zwischen Regel 45 and Token GTEQ wurde durch Reduzierung gelöst (%left GTEQ).
    Konflikt zwischen Regel 45 and Token GT wurde durch Reduzierung gelöst (%left GT).
    Konflikt zwischen Regel 45 and Token PLUS wurde durch Schieben gelöst (LSEQ < PLUS).
    Konflikt zwischen Regel 45 and Token MINUS wurde durch Schieben gelöst (LSEQ < MINUS).
    Konflikt zwischen Regel 45 and Token MUL wurde durch Schieben gelöst (LSEQ < MUL).
    Konflikt zwischen Regel 45 and Token DIV wurde durch Schieben gelöst (LSEQ < DIV).
    Konflikt zwischen Regel 45 and Token MOD wurde durch Schieben gelöst (LSEQ < MOD).


Zustand 89

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   46           | expression GTEQ expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, EQ, NE, LS, LSEQ, GTEQ, GT, BRACKET_CLOSE, PARA_CLOSE]
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

    PLUS   schiebe und gehe zu Zustand 56 über
    MINUS  schiebe und gehe zu Zustand 57 über
    MUL    schiebe und gehe zu Zustand 58 über
    DIV    schiebe und gehe zu Zustand 59 über
    MOD    schiebe und gehe zu Zustand 60 über

    $default  reduziere mit Regel 46 (expression)

    Konflikt zwischen Regel 46 and Token ASSIGN wurde durch Reduzierung gelöst (ASSIGN < GTEQ).
    Konflikt zwischen Regel 46 and Token LOGICAL_OR wurde durch Reduzierung gelöst (LOGICAL_OR < GTEQ).
    Konflikt zwischen Regel 46 and Token LOGICAL_AND wurde durch Reduzierung gelöst (LOGICAL_AND < GTEQ).
    Konflikt zwischen Regel 46 and Token EQ wurde durch Reduzierung gelöst (%left EQ).
    Konflikt zwischen Regel 46 and Token NE wurde durch Reduzierung gelöst (%left NE).
    Konflikt zwischen Regel 46 and Token LS wurde durch Reduzierung gelöst (%left LS).
    Konflikt zwischen Regel 46 and Token LSEQ wurde durch Reduzierung gelöst (%left LSEQ).
    Konflikt zwischen Regel 46 and Token GTEQ wurde durch Reduzierung gelöst (%left GTEQ).
    Konflikt zwischen Regel 46 and Token GT wurde durch Reduzierung gelöst (%left GT).
    Konflikt zwischen Regel 46 and Token PLUS wurde durch Schieben gelöst (GTEQ < PLUS).
    Konflikt zwischen Regel 46 and Token MINUS wurde durch Schieben gelöst (GTEQ < MINUS).
    Konflikt zwischen Regel 46 and Token MUL wurde durch Schieben gelöst (GTEQ < MUL).
    Konflikt zwischen Regel 46 and Token DIV wurde durch Schieben gelöst (GTEQ < DIV).
    Konflikt zwischen Regel 46 and Token MOD wurde durch Schieben gelöst (GTEQ < MOD).

>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074


<<<<<<< HEAD
state 92
=======
    PLUS   schiebe und gehe zu Zustand 56 über
    MINUS  schiebe und gehe zu Zustand 57 über
    MUL    schiebe und gehe zu Zustand 58 über
    DIV    schiebe und gehe zu Zustand 59 über
    MOD    schiebe und gehe zu Zustand 60 über

    $default  reduziere mit Regel 47 (expression)

    Konflikt zwischen Regel 47 and Token ASSIGN wurde durch Reduzierung gelöst (ASSIGN < GT).
    Konflikt zwischen Regel 47 and Token LOGICAL_OR wurde durch Reduzierung gelöst (LOGICAL_OR < GT).
    Konflikt zwischen Regel 47 and Token LOGICAL_AND wurde durch Reduzierung gelöst (LOGICAL_AND < GT).
    Konflikt zwischen Regel 47 and Token EQ wurde durch Reduzierung gelöst (%left EQ).
    Konflikt zwischen Regel 47 and Token NE wurde durch Reduzierung gelöst (%left NE).
    Konflikt zwischen Regel 47 and Token LS wurde durch Reduzierung gelöst (%left LS).
    Konflikt zwischen Regel 47 and Token LSEQ wurde durch Reduzierung gelöst (%left LSEQ).
    Konflikt zwischen Regel 47 and Token GTEQ wurde durch Reduzierung gelöst (%left GTEQ).
    Konflikt zwischen Regel 47 and Token GT wurde durch Reduzierung gelöst (%left GT).
    Konflikt zwischen Regel 47 and Token PLUS wurde durch Schieben gelöst (GT < PLUS).
    Konflikt zwischen Regel 47 and Token MINUS wurde durch Schieben gelöst (GT < MINUS).
    Konflikt zwischen Regel 47 and Token MUL wurde durch Schieben gelöst (GT < MUL).
    Konflikt zwischen Regel 47 and Token DIV wurde durch Schieben gelöst (GT < DIV).
    Konflikt zwischen Regel 47 and Token MOD wurde durch Schieben gelöst (GT < MOD).


Zustand 91
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
<<<<<<< HEAD
   49           | expression MINUS expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, EQ, NE, LS, LSEQ, GTEQ, GT, PLUS, MINUS, MUL, DIV, MOD, BRACKET_CLOSE, PARA_CLOSE]
=======
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

<<<<<<< HEAD
    $default  reduce using rule 49 (expression)

    Conflict between rule 49 and token ASSIGN resolved as reduce (ASSIGN < MINUS).
    Conflict between rule 49 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < MINUS).
    Conflict between rule 49 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < MINUS).
    Conflict between rule 49 and token EQ resolved as reduce (EQ < MINUS).
    Conflict between rule 49 and token NE resolved as reduce (NE < MINUS).
    Conflict between rule 49 and token LS resolved as reduce (LS < MINUS).
    Conflict between rule 49 and token LSEQ resolved as reduce (LSEQ < MINUS).
    Conflict between rule 49 and token GTEQ resolved as reduce (GTEQ < MINUS).
    Conflict between rule 49 and token GT resolved as reduce (GT < MINUS).
    Conflict between rule 49 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 49 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 49 and token MUL resolved as reduce (%left MUL).
    Conflict between rule 49 and token DIV resolved as reduce (%left DIV).
    Conflict between rule 49 and token MOD resolved as reduce (%left MOD).


state 93
=======
    $default  reduziere mit Regel 48 (expression)

    Konflikt zwischen Regel 48 and Token ASSIGN wurde durch Reduzierung gelöst (ASSIGN < PLUS).
    Konflikt zwischen Regel 48 and Token LOGICAL_OR wurde durch Reduzierung gelöst (LOGICAL_OR < PLUS).
    Konflikt zwischen Regel 48 and Token LOGICAL_AND wurde durch Reduzierung gelöst (LOGICAL_AND < PLUS).
    Konflikt zwischen Regel 48 and Token EQ wurde durch Reduzierung gelöst (EQ < PLUS).
    Konflikt zwischen Regel 48 and Token NE wurde durch Reduzierung gelöst (NE < PLUS).
    Konflikt zwischen Regel 48 and Token LS wurde durch Reduzierung gelöst (LS < PLUS).
    Konflikt zwischen Regel 48 and Token LSEQ wurde durch Reduzierung gelöst (LSEQ < PLUS).
    Konflikt zwischen Regel 48 and Token GTEQ wurde durch Reduzierung gelöst (GTEQ < PLUS).
    Konflikt zwischen Regel 48 and Token GT wurde durch Reduzierung gelöst (GT < PLUS).
    Konflikt zwischen Regel 48 and Token PLUS wurde durch Reduzierung gelöst (%left PLUS).
    Konflikt zwischen Regel 48 and Token MINUS wurde durch Reduzierung gelöst (%left MINUS).
    Konflikt zwischen Regel 48 and Token MUL wurde durch Reduzierung gelöst (%left MUL).
    Konflikt zwischen Regel 48 and Token DIV wurde durch Reduzierung gelöst (%left DIV).
    Konflikt zwischen Regel 48 and Token MOD wurde durch Reduzierung gelöst (%left MOD).


Zustand 92
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

<<<<<<< HEAD
    $default  reduce using rule 50 (expression)

    Conflict between rule 50 and token ASSIGN resolved as reduce (ASSIGN < MUL).
    Conflict between rule 50 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < MUL).
    Conflict between rule 50 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < MUL).
    Conflict between rule 50 and token EQ resolved as reduce (EQ < MUL).
    Conflict between rule 50 and token NE resolved as reduce (NE < MUL).
    Conflict between rule 50 and token LS resolved as reduce (LS < MUL).
    Conflict between rule 50 and token LSEQ resolved as reduce (LSEQ < MUL).
    Conflict between rule 50 and token GTEQ resolved as reduce (GTEQ < MUL).
    Conflict between rule 50 and token GT resolved as reduce (GT < MUL).
    Conflict between rule 50 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 50 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 50 and token MUL resolved as reduce (%left MUL).
    Conflict between rule 50 and token DIV resolved as reduce (%left DIV).
    Conflict between rule 50 and token MOD resolved as reduce (%left MOD).


state 94

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   51           | expression DIV expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, EQ, NE, LS, LSEQ, GTEQ, GT, PLUS, MINUS, MUL, DIV, MOD, BRACKET_CLOSE, PARA_CLOSE]
   52           | expression . MOD expression

    $default  reduce using rule 51 (expression)
=======
    $default  reduziere mit Regel 49 (expression)

    Konflikt zwischen Regel 49 and Token ASSIGN wurde durch Reduzierung gelöst (ASSIGN < MINUS).
    Konflikt zwischen Regel 49 and Token LOGICAL_OR wurde durch Reduzierung gelöst (LOGICAL_OR < MINUS).
    Konflikt zwischen Regel 49 and Token LOGICAL_AND wurde durch Reduzierung gelöst (LOGICAL_AND < MINUS).
    Konflikt zwischen Regel 49 and Token EQ wurde durch Reduzierung gelöst (EQ < MINUS).
    Konflikt zwischen Regel 49 and Token NE wurde durch Reduzierung gelöst (NE < MINUS).
    Konflikt zwischen Regel 49 and Token LS wurde durch Reduzierung gelöst (LS < MINUS).
    Konflikt zwischen Regel 49 and Token LSEQ wurde durch Reduzierung gelöst (LSEQ < MINUS).
    Konflikt zwischen Regel 49 and Token GTEQ wurde durch Reduzierung gelöst (GTEQ < MINUS).
    Konflikt zwischen Regel 49 and Token GT wurde durch Reduzierung gelöst (GT < MINUS).
    Konflikt zwischen Regel 49 and Token PLUS wurde durch Reduzierung gelöst (%left PLUS).
    Konflikt zwischen Regel 49 and Token MINUS wurde durch Reduzierung gelöst (%left MINUS).
    Konflikt zwischen Regel 49 and Token MUL wurde durch Reduzierung gelöst (%left MUL).
    Konflikt zwischen Regel 49 and Token DIV wurde durch Reduzierung gelöst (%left DIV).
    Konflikt zwischen Regel 49 and Token MOD wurde durch Reduzierung gelöst (%left MOD).
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074


Zustand 93

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression
<<<<<<< HEAD
   52           | expression MOD expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, EQ, NE, LS, LSEQ, GTEQ, GT, PLUS, MINUS, MUL, DIV, MOD, BRACKET_CLOSE, PARA_CLOSE]

    $default  reduce using rule 52 (expression)

    Conflict between rule 52 and token ASSIGN resolved as reduce (ASSIGN < MOD).
    Conflict between rule 52 and token LOGICAL_OR resolved as reduce (LOGICAL_OR < MOD).
    Conflict between rule 52 and token LOGICAL_AND resolved as reduce (LOGICAL_AND < MOD).
    Conflict between rule 52 and token EQ resolved as reduce (EQ < MOD).
    Conflict between rule 52 and token NE resolved as reduce (NE < MOD).
    Conflict between rule 52 and token LS resolved as reduce (LS < MOD).
    Conflict between rule 52 and token LSEQ resolved as reduce (LSEQ < MOD).
    Conflict between rule 52 and token GTEQ resolved as reduce (GTEQ < MOD).
    Conflict between rule 52 and token GT resolved as reduce (GT < MOD).
    Conflict between rule 52 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 52 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 52 and token MUL resolved as reduce (%left MUL).
    Conflict between rule 52 and token DIV resolved as reduce (%left DIV).
    Conflict between rule 52 and token MOD resolved as reduce (%left MOD).


state 96
=======

    $default  reduziere mit Regel 50 (expression)

    Konflikt zwischen Regel 50 and Token ASSIGN wurde durch Reduzierung gelöst (ASSIGN < MUL).
    Konflikt zwischen Regel 50 and Token LOGICAL_OR wurde durch Reduzierung gelöst (LOGICAL_OR < MUL).
    Konflikt zwischen Regel 50 and Token LOGICAL_AND wurde durch Reduzierung gelöst (LOGICAL_AND < MUL).
    Konflikt zwischen Regel 50 and Token EQ wurde durch Reduzierung gelöst (EQ < MUL).
    Konflikt zwischen Regel 50 and Token NE wurde durch Reduzierung gelöst (NE < MUL).
    Konflikt zwischen Regel 50 and Token LS wurde durch Reduzierung gelöst (LS < MUL).
    Konflikt zwischen Regel 50 and Token LSEQ wurde durch Reduzierung gelöst (LSEQ < MUL).
    Konflikt zwischen Regel 50 and Token GTEQ wurde durch Reduzierung gelöst (GTEQ < MUL).
    Konflikt zwischen Regel 50 and Token GT wurde durch Reduzierung gelöst (GT < MUL).
    Konflikt zwischen Regel 50 and Token PLUS wurde durch Reduzierung gelöst (%left PLUS).
    Konflikt zwischen Regel 50 and Token MINUS wurde durch Reduzierung gelöst (%left MINUS).
    Konflikt zwischen Regel 50 and Token MUL wurde durch Reduzierung gelöst (%left MUL).
    Konflikt zwischen Regel 50 and Token DIV wurde durch Reduzierung gelöst (%left DIV).
    Konflikt zwischen Regel 50 and Token MOD wurde durch Reduzierung gelöst (%left MOD).


Zustand 94

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   51           | expression DIV expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, EQ, NE, LS, LSEQ, GTEQ, GT, PLUS, MINUS, MUL, DIV, MOD, BRACKET_CLOSE, PARA_CLOSE]
   52           | expression . MOD expression

    $default  reduziere mit Regel 51 (expression)

    Konflikt zwischen Regel 51 and Token ASSIGN wurde durch Reduzierung gelöst (ASSIGN < DIV).
    Konflikt zwischen Regel 51 and Token LOGICAL_OR wurde durch Reduzierung gelöst (LOGICAL_OR < DIV).
    Konflikt zwischen Regel 51 and Token LOGICAL_AND wurde durch Reduzierung gelöst (LOGICAL_AND < DIV).
    Konflikt zwischen Regel 51 and Token EQ wurde durch Reduzierung gelöst (EQ < DIV).
    Konflikt zwischen Regel 51 and Token NE wurde durch Reduzierung gelöst (NE < DIV).
    Konflikt zwischen Regel 51 and Token LS wurde durch Reduzierung gelöst (LS < DIV).
    Konflikt zwischen Regel 51 and Token LSEQ wurde durch Reduzierung gelöst (LSEQ < DIV).
    Konflikt zwischen Regel 51 and Token GTEQ wurde durch Reduzierung gelöst (GTEQ < DIV).
    Konflikt zwischen Regel 51 and Token GT wurde durch Reduzierung gelöst (GT < DIV).
    Konflikt zwischen Regel 51 and Token PLUS wurde durch Reduzierung gelöst (%left PLUS).
    Konflikt zwischen Regel 51 and Token MINUS wurde durch Reduzierung gelöst (%left MINUS).
    Konflikt zwischen Regel 51 and Token MUL wurde durch Reduzierung gelöst (%left MUL).
    Konflikt zwischen Regel 51 and Token DIV wurde durch Reduzierung gelöst (%left DIV).
    Konflikt zwischen Regel 51 and Token MOD wurde durch Reduzierung gelöst (%left MOD).


Zustand 95

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression
   52           | expression MOD expression .  [COMMA, SEMICOLON, ASSIGN, LOGICAL_OR, LOGICAL_AND, EQ, NE, LS, LSEQ, GTEQ, GT, PLUS, MINUS, MUL, DIV, MOD, BRACKET_CLOSE, PARA_CLOSE]

    $default  reduziere mit Regel 52 (expression)

    Konflikt zwischen Regel 52 and Token ASSIGN wurde durch Reduzierung gelöst (ASSIGN < MOD).
    Konflikt zwischen Regel 52 and Token LOGICAL_OR wurde durch Reduzierung gelöst (LOGICAL_OR < MOD).
    Konflikt zwischen Regel 52 and Token LOGICAL_AND wurde durch Reduzierung gelöst (LOGICAL_AND < MOD).
    Konflikt zwischen Regel 52 and Token EQ wurde durch Reduzierung gelöst (EQ < MOD).
    Konflikt zwischen Regel 52 and Token NE wurde durch Reduzierung gelöst (NE < MOD).
    Konflikt zwischen Regel 52 and Token LS wurde durch Reduzierung gelöst (LS < MOD).
    Konflikt zwischen Regel 52 and Token LSEQ wurde durch Reduzierung gelöst (LSEQ < MOD).
    Konflikt zwischen Regel 52 and Token GTEQ wurde durch Reduzierung gelöst (GTEQ < MOD).
    Konflikt zwischen Regel 52 and Token GT wurde durch Reduzierung gelöst (GT < MOD).
    Konflikt zwischen Regel 52 and Token PLUS wurde durch Reduzierung gelöst (%left PLUS).
    Konflikt zwischen Regel 52 and Token MINUS wurde durch Reduzierung gelöst (%left MINUS).
    Konflikt zwischen Regel 52 and Token MUL wurde durch Reduzierung gelöst (%left MUL).
    Konflikt zwischen Regel 52 and Token DIV wurde durch Reduzierung gelöst (%left DIV).
    Konflikt zwischen Regel 52 and Token MOD wurde durch Reduzierung gelöst (%left MOD).


Zustand 96
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression
   62 function_call_parameters: function_call_parameters COMMA expression .  [COMMA, PARA_CLOSE]

<<<<<<< HEAD
    ASSIGN       shift, and go to state 47
    LOGICAL_OR   shift, and go to state 48
    LOGICAL_AND  shift, and go to state 49
    EQ           shift, and go to state 50
    NE           shift, and go to state 51
    LS           shift, and go to state 52
    LSEQ         shift, and go to state 53
    GTEQ         shift, and go to state 54
    GT           shift, and go to state 55
    PLUS         shift, and go to state 56
    MINUS        shift, and go to state 57
    MUL          shift, and go to state 58
    DIV          shift, and go to state 59
    MOD          shift, and go to state 60

    $default  reduce using rule 62 (function_call_parameters)


state 97
=======
    ASSIGN       schiebe und gehe zu Zustand 47 über
    LOGICAL_OR   schiebe und gehe zu Zustand 48 über
    LOGICAL_AND  schiebe und gehe zu Zustand 49 über
    EQ           schiebe und gehe zu Zustand 50 über
    NE           schiebe und gehe zu Zustand 51 über
    LS           schiebe und gehe zu Zustand 52 über
    LSEQ         schiebe und gehe zu Zustand 53 über
    GTEQ         schiebe und gehe zu Zustand 54 über
    GT           schiebe und gehe zu Zustand 55 über
    PLUS         schiebe und gehe zu Zustand 56 über
    MINUS        schiebe und gehe zu Zustand 57 über
    MUL          schiebe und gehe zu Zustand 58 über
    DIV          schiebe und gehe zu Zustand 59 über
    MOD          schiebe und gehe zu Zustand 60 über

    $default  reduziere mit Regel 62 (function_call_parameters)


Zustand 97
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

   37 stmt_loop: DO stmt . WHILE PARA_OPEN expression PARA_CLOSE SEMICOLON

    WHILE  schiebe und gehe zu Zustand 106 über


Zustand 98

   36 stmt_loop: WHILE PARA_OPEN . expression PARA_CLOSE stmt
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

<<<<<<< HEAD
    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    MINUS        shift, and go to state 33
    PARA_OPEN    shift, and go to state 34
=======
    ID           schiebe und gehe zu Zustand 30 über
    NUM          schiebe und gehe zu Zustand 31 über
    LOGICAL_NOT  schiebe und gehe zu Zustand 32 über
    MINUS        schiebe und gehe zu Zustand 33 über
    PARA_OPEN    schiebe und gehe zu Zustand 34 über
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

    expression                gehe zu Zustand 107 über
    primary                   gehe zu Zustand 36 über
    function_call             gehe zu Zustand 37 über
    function_call_parameters  gehe zu Zustand 38 über


Zustand 99

   34 stmt_conditional: IF PARA_OPEN . expression PARA_CLOSE stmt
   35                 | IF PARA_OPEN . expression PARA_CLOSE stmt ELSE stmt
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

<<<<<<< HEAD
    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    MINUS        shift, and go to state 33
    PARA_OPEN    shift, and go to state 34
=======
    ID           schiebe und gehe zu Zustand 30 über
    NUM          schiebe und gehe zu Zustand 31 über
    LOGICAL_NOT  schiebe und gehe zu Zustand 32 über
    MINUS        schiebe und gehe zu Zustand 33 über
    PARA_OPEN    schiebe und gehe zu Zustand 34 über
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

    expression                gehe zu Zustand 108 über
    primary                   gehe zu Zustand 36 über
    function_call             gehe zu Zustand 37 über
    function_call_parameters  gehe zu Zustand 38 über


Zustand 100

   31 stmt: RETURN SEMICOLON .

    $default  reduziere mit Regel 31 (stmt)


Zustand 101

   30 stmt: RETURN expression . SEMICOLON
   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

<<<<<<< HEAD
    SEMICOLON    shift, and go to state 109
    ASSIGN       shift, and go to state 47
    LOGICAL_OR   shift, and go to state 48
    LOGICAL_AND  shift, and go to state 49
    EQ           shift, and go to state 50
    NE           shift, and go to state 51
    LS           shift, and go to state 52
    LSEQ         shift, and go to state 53
    GTEQ         shift, and go to state 54
    GT           shift, and go to state 55
    PLUS         shift, and go to state 56
    MINUS        shift, and go to state 57
    MUL          shift, and go to state 58
    DIV          shift, and go to state 59
    MOD          shift, and go to state 60


state 102
=======
    SEMICOLON    schiebe und gehe zu Zustand 109 über
    ASSIGN       schiebe und gehe zu Zustand 47 über
    LOGICAL_OR   schiebe und gehe zu Zustand 48 über
    LOGICAL_AND  schiebe und gehe zu Zustand 49 über
    EQ           schiebe und gehe zu Zustand 50 über
    NE           schiebe und gehe zu Zustand 51 über
    LS           schiebe und gehe zu Zustand 52 über
    LSEQ         schiebe und gehe zu Zustand 53 über
    GTEQ         schiebe und gehe zu Zustand 54 über
    GT           schiebe und gehe zu Zustand 55 über
    PLUS         schiebe und gehe zu Zustand 56 über
    MINUS        schiebe und gehe zu Zustand 57 über
    MUL          schiebe und gehe zu Zustand 58 über
    DIV          schiebe und gehe zu Zustand 59 über
    MOD          schiebe und gehe zu Zustand 60 über


Zustand 102
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

    7 type: . INT
    8     | . VOID
    9 declaration: . declaration COMMA declaration_element
   10            | . type declaration_element
   24 stmt_list: stmt_list . stmt
   25 stmt: . stmt_block
   26     | . declaration SEMICOLON
   27     | . expression SEMICOLON
   28     | . stmt_conditional
   29     | . stmt_loop
   30     | . RETURN expression SEMICOLON
   31     | . RETURN SEMICOLON
   32     | . SEMICOLON
   33 stmt_block: . BRACE_OPEN stmt_list BRACE_CLOSE
   33           | BRACE_OPEN stmt_list . BRACE_CLOSE
   34 stmt_conditional: . IF PARA_OPEN expression PARA_CLOSE stmt
   35                 | . IF PARA_OPEN expression PARA_CLOSE stmt ELSE stmt
   36 stmt_loop: . WHILE PARA_OPEN expression PARA_CLOSE stmt
   37          | . DO stmt WHILE PARA_OPEN expression PARA_CLOSE SEMICOLON
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

<<<<<<< HEAD
    DO           shift, and go to state 64
    WHILE        shift, and go to state 65
    IF           shift, and go to state 66
    INT          shift, and go to state 1
    VOID         shift, and go to state 2
    RETURN       shift, and go to state 67
    SEMICOLON    shift, and go to state 68
    BRACE_OPEN   shift, and go to state 69
    BRACE_CLOSE  shift, and go to state 110
    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    MINUS        shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    type                      go to state 71
    declaration               go to state 72
    stmt                      go to state 73
    stmt_block                go to state 74
    stmt_conditional          go to state 75
    stmt_loop                 go to state 76
    expression                go to state 77
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 103
=======
    DO           schiebe und gehe zu Zustand 64 über
    WHILE        schiebe und gehe zu Zustand 65 über
    IF           schiebe und gehe zu Zustand 66 über
    INT          schiebe und gehe zu Zustand 1 über
    VOID         schiebe und gehe zu Zustand 2 über
    RETURN       schiebe und gehe zu Zustand 67 über
    SEMICOLON    schiebe und gehe zu Zustand 68 über
    BRACE_OPEN   schiebe und gehe zu Zustand 69 über
    BRACE_CLOSE  schiebe und gehe zu Zustand 110 über
    ID           schiebe und gehe zu Zustand 30 über
    NUM          schiebe und gehe zu Zustand 31 über
    LOGICAL_NOT  schiebe und gehe zu Zustand 32 über
    MINUS        schiebe und gehe zu Zustand 33 über
    PARA_OPEN    schiebe und gehe zu Zustand 34 über

    type                      gehe zu Zustand 71 über
    declaration               gehe zu Zustand 72 über
    stmt                      gehe zu Zustand 73 über
    stmt_block                gehe zu Zustand 74 über
    stmt_conditional          gehe zu Zustand 75 über
    stmt_loop                 gehe zu Zustand 76 über
    expression                gehe zu Zustand 77 über
    primary                   gehe zu Zustand 36 über
    function_call             gehe zu Zustand 37 über
    function_call_parameters  gehe zu Zustand 38 über


Zustand 103
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

   26 stmt: declaration SEMICOLON .

    $default  reduziere mit Regel 26 (stmt)


Zustand 104

   27 stmt: expression SEMICOLON .

    $default  reduziere mit Regel 27 (stmt)


Zustand 105

   54 expression: ID BRACKET_OPEN primary BRACKET_CLOSE .

    $default  reduziere mit Regel 54 (expression)


Zustand 106

   37 stmt_loop: DO stmt WHILE . PARA_OPEN expression PARA_CLOSE SEMICOLON

    PARA_OPEN  schiebe und gehe zu Zustand 111 über


Zustand 107

   36 stmt_loop: WHILE PARA_OPEN expression . PARA_CLOSE stmt
   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

<<<<<<< HEAD
    ASSIGN       shift, and go to state 47
    LOGICAL_OR   shift, and go to state 48
    LOGICAL_AND  shift, and go to state 49
    EQ           shift, and go to state 50
    NE           shift, and go to state 51
    LS           shift, and go to state 52
    LSEQ         shift, and go to state 53
    GTEQ         shift, and go to state 54
    GT           shift, and go to state 55
    PLUS         shift, and go to state 56
    MINUS        shift, and go to state 57
    MUL          shift, and go to state 58
    DIV          shift, and go to state 59
    MOD          shift, and go to state 60
    PARA_CLOSE   shift, and go to state 112


state 108
=======
    ASSIGN       schiebe und gehe zu Zustand 47 über
    LOGICAL_OR   schiebe und gehe zu Zustand 48 über
    LOGICAL_AND  schiebe und gehe zu Zustand 49 über
    EQ           schiebe und gehe zu Zustand 50 über
    NE           schiebe und gehe zu Zustand 51 über
    LS           schiebe und gehe zu Zustand 52 über
    LSEQ         schiebe und gehe zu Zustand 53 über
    GTEQ         schiebe und gehe zu Zustand 54 über
    GT           schiebe und gehe zu Zustand 55 über
    PLUS         schiebe und gehe zu Zustand 56 über
    MINUS        schiebe und gehe zu Zustand 57 über
    MUL          schiebe und gehe zu Zustand 58 über
    DIV          schiebe und gehe zu Zustand 59 über
    MOD          schiebe und gehe zu Zustand 60 über
    PARA_CLOSE   schiebe und gehe zu Zustand 112 über


Zustand 108
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

   34 stmt_conditional: IF PARA_OPEN expression . PARA_CLOSE stmt
   35                 | IF PARA_OPEN expression . PARA_CLOSE stmt ELSE stmt
   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

<<<<<<< HEAD
    ASSIGN       shift, and go to state 47
    LOGICAL_OR   shift, and go to state 48
    LOGICAL_AND  shift, and go to state 49
    EQ           shift, and go to state 50
    NE           shift, and go to state 51
    LS           shift, and go to state 52
    LSEQ         shift, and go to state 53
    GTEQ         shift, and go to state 54
    GT           shift, and go to state 55
    PLUS         shift, and go to state 56
    MINUS        shift, and go to state 57
    MUL          shift, and go to state 58
    DIV          shift, and go to state 59
    MOD          shift, and go to state 60
    PARA_CLOSE   shift, and go to state 113


state 109
=======
    ASSIGN       schiebe und gehe zu Zustand 47 über
    LOGICAL_OR   schiebe und gehe zu Zustand 48 über
    LOGICAL_AND  schiebe und gehe zu Zustand 49 über
    EQ           schiebe und gehe zu Zustand 50 über
    NE           schiebe und gehe zu Zustand 51 über
    LS           schiebe und gehe zu Zustand 52 über
    LSEQ         schiebe und gehe zu Zustand 53 über
    GTEQ         schiebe und gehe zu Zustand 54 über
    GT           schiebe und gehe zu Zustand 55 über
    PLUS         schiebe und gehe zu Zustand 56 über
    MINUS        schiebe und gehe zu Zustand 57 über
    MUL          schiebe und gehe zu Zustand 58 über
    DIV          schiebe und gehe zu Zustand 59 über
    MOD          schiebe und gehe zu Zustand 60 über
    PARA_CLOSE   schiebe und gehe zu Zustand 113 über


Zustand 109
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

   30 stmt: RETURN expression SEMICOLON .

    $default  reduziere mit Regel 30 (stmt)


Zustand 110

   33 stmt_block: BRACE_OPEN stmt_list BRACE_CLOSE .

    $default  reduziere mit Regel 33 (stmt_block)


Zustand 111

   37 stmt_loop: DO stmt WHILE PARA_OPEN . expression PARA_CLOSE SEMICOLON
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

<<<<<<< HEAD
    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    MINUS        shift, and go to state 33
    PARA_OPEN    shift, and go to state 34
=======
    ID           schiebe und gehe zu Zustand 30 über
    NUM          schiebe und gehe zu Zustand 31 über
    LOGICAL_NOT  schiebe und gehe zu Zustand 32 über
    MINUS        schiebe und gehe zu Zustand 33 über
    PARA_OPEN    schiebe und gehe zu Zustand 34 über
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

    expression                gehe zu Zustand 114 über
    primary                   gehe zu Zustand 36 über
    function_call             gehe zu Zustand 37 über
    function_call_parameters  gehe zu Zustand 38 über


Zustand 112

    7 type: . INT
    8     | . VOID
    9 declaration: . declaration COMMA declaration_element
   10            | . type declaration_element
   25 stmt: . stmt_block
   26     | . declaration SEMICOLON
   27     | . expression SEMICOLON
   28     | . stmt_conditional
   29     | . stmt_loop
   30     | . RETURN expression SEMICOLON
   31     | . RETURN SEMICOLON
   32     | . SEMICOLON
   33 stmt_block: . BRACE_OPEN stmt_list BRACE_CLOSE
   34 stmt_conditional: . IF PARA_OPEN expression PARA_CLOSE stmt
   35                 | . IF PARA_OPEN expression PARA_CLOSE stmt ELSE stmt
   36 stmt_loop: . WHILE PARA_OPEN expression PARA_CLOSE stmt
   36          | WHILE PARA_OPEN expression PARA_CLOSE . stmt
   37          | . DO stmt WHILE PARA_OPEN expression PARA_CLOSE SEMICOLON
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

<<<<<<< HEAD
    DO           shift, and go to state 64
    WHILE        shift, and go to state 65
    IF           shift, and go to state 66
    INT          shift, and go to state 1
    VOID         shift, and go to state 2
    RETURN       shift, and go to state 67
    SEMICOLON    shift, and go to state 68
    BRACE_OPEN   shift, and go to state 69
    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    MINUS        shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    type                      go to state 71
    declaration               go to state 72
    stmt                      go to state 115
    stmt_block                go to state 74
    stmt_conditional          go to state 75
    stmt_loop                 go to state 76
    expression                go to state 77
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 113
=======
    DO           schiebe und gehe zu Zustand 64 über
    WHILE        schiebe und gehe zu Zustand 65 über
    IF           schiebe und gehe zu Zustand 66 über
    INT          schiebe und gehe zu Zustand 1 über
    VOID         schiebe und gehe zu Zustand 2 über
    RETURN       schiebe und gehe zu Zustand 67 über
    SEMICOLON    schiebe und gehe zu Zustand 68 über
    BRACE_OPEN   schiebe und gehe zu Zustand 69 über
    ID           schiebe und gehe zu Zustand 30 über
    NUM          schiebe und gehe zu Zustand 31 über
    LOGICAL_NOT  schiebe und gehe zu Zustand 32 über
    MINUS        schiebe und gehe zu Zustand 33 über
    PARA_OPEN    schiebe und gehe zu Zustand 34 über

    type                      gehe zu Zustand 71 über
    declaration               gehe zu Zustand 72 über
    stmt                      gehe zu Zustand 115 über
    stmt_block                gehe zu Zustand 74 über
    stmt_conditional          gehe zu Zustand 75 über
    stmt_loop                 gehe zu Zustand 76 über
    expression                gehe zu Zustand 77 über
    primary                   gehe zu Zustand 36 über
    function_call             gehe zu Zustand 37 über
    function_call_parameters  gehe zu Zustand 38 über


Zustand 113
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

    7 type: . INT
    8     | . VOID
    9 declaration: . declaration COMMA declaration_element
   10            | . type declaration_element
   25 stmt: . stmt_block
   26     | . declaration SEMICOLON
   27     | . expression SEMICOLON
   28     | . stmt_conditional
   29     | . stmt_loop
   30     | . RETURN expression SEMICOLON
   31     | . RETURN SEMICOLON
   32     | . SEMICOLON
   33 stmt_block: . BRACE_OPEN stmt_list BRACE_CLOSE
   34 stmt_conditional: . IF PARA_OPEN expression PARA_CLOSE stmt
   34                 | IF PARA_OPEN expression PARA_CLOSE . stmt
   35                 | . IF PARA_OPEN expression PARA_CLOSE stmt ELSE stmt
   35                 | IF PARA_OPEN expression PARA_CLOSE . stmt ELSE stmt
   36 stmt_loop: . WHILE PARA_OPEN expression PARA_CLOSE stmt
   37          | . DO stmt WHILE PARA_OPEN expression PARA_CLOSE SEMICOLON
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

<<<<<<< HEAD
    DO           shift, and go to state 64
    WHILE        shift, and go to state 65
    IF           shift, and go to state 66
    INT          shift, and go to state 1
    VOID         shift, and go to state 2
    RETURN       shift, and go to state 67
    SEMICOLON    shift, and go to state 68
    BRACE_OPEN   shift, and go to state 69
    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    MINUS        shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    type                      go to state 71
    declaration               go to state 72
    stmt                      go to state 116
    stmt_block                go to state 74
    stmt_conditional          go to state 75
    stmt_loop                 go to state 76
    expression                go to state 77
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 114
=======
    DO           schiebe und gehe zu Zustand 64 über
    WHILE        schiebe und gehe zu Zustand 65 über
    IF           schiebe und gehe zu Zustand 66 über
    INT          schiebe und gehe zu Zustand 1 über
    VOID         schiebe und gehe zu Zustand 2 über
    RETURN       schiebe und gehe zu Zustand 67 über
    SEMICOLON    schiebe und gehe zu Zustand 68 über
    BRACE_OPEN   schiebe und gehe zu Zustand 69 über
    ID           schiebe und gehe zu Zustand 30 über
    NUM          schiebe und gehe zu Zustand 31 über
    LOGICAL_NOT  schiebe und gehe zu Zustand 32 über
    MINUS        schiebe und gehe zu Zustand 33 über
    PARA_OPEN    schiebe und gehe zu Zustand 34 über

    type                      gehe zu Zustand 71 über
    declaration               gehe zu Zustand 72 über
    stmt                      gehe zu Zustand 116 über
    stmt_block                gehe zu Zustand 74 über
    stmt_conditional          gehe zu Zustand 75 über
    stmt_loop                 gehe zu Zustand 76 über
    expression                gehe zu Zustand 77 über
    primary                   gehe zu Zustand 36 über
    function_call             gehe zu Zustand 37 über
    function_call_parameters  gehe zu Zustand 38 über


Zustand 114
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

   37 stmt_loop: DO stmt WHILE PARA_OPEN expression . PARA_CLOSE SEMICOLON
   38 expression: expression . ASSIGN expression
   39           | expression . LOGICAL_OR expression
   40           | expression . LOGICAL_AND expression
   42           | expression . EQ expression
   43           | expression . NE expression
   44           | expression . LS expression
   45           | expression . LSEQ expression
   46           | expression . GTEQ expression
   47           | expression . GT expression
   48           | expression . PLUS expression
   49           | expression . MINUS expression
   50           | expression . MUL expression
   51           | expression . DIV expression
   52           | expression . MOD expression

<<<<<<< HEAD
    ASSIGN       shift, and go to state 47
    LOGICAL_OR   shift, and go to state 48
    LOGICAL_AND  shift, and go to state 49
    EQ           shift, and go to state 50
    NE           shift, and go to state 51
    LS           shift, and go to state 52
    LSEQ         shift, and go to state 53
    GTEQ         shift, and go to state 54
    GT           shift, and go to state 55
    PLUS         shift, and go to state 56
    MINUS        shift, and go to state 57
    MUL          shift, and go to state 58
    DIV          shift, and go to state 59
    MOD          shift, and go to state 60
    PARA_CLOSE   shift, and go to state 117


state 115
=======
    ASSIGN       schiebe und gehe zu Zustand 47 über
    LOGICAL_OR   schiebe und gehe zu Zustand 48 über
    LOGICAL_AND  schiebe und gehe zu Zustand 49 über
    EQ           schiebe und gehe zu Zustand 50 über
    NE           schiebe und gehe zu Zustand 51 über
    LS           schiebe und gehe zu Zustand 52 über
    LSEQ         schiebe und gehe zu Zustand 53 über
    GTEQ         schiebe und gehe zu Zustand 54 über
    GT           schiebe und gehe zu Zustand 55 über
    PLUS         schiebe und gehe zu Zustand 56 über
    MINUS        schiebe und gehe zu Zustand 57 über
    MUL          schiebe und gehe zu Zustand 58 über
    DIV          schiebe und gehe zu Zustand 59 über
    MOD          schiebe und gehe zu Zustand 60 über
    PARA_CLOSE   schiebe und gehe zu Zustand 117 über


Zustand 115
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

   36 stmt_loop: WHILE PARA_OPEN expression PARA_CLOSE stmt .

    $default  reduziere mit Regel 36 (stmt_loop)


Zustand 116

   34 stmt_conditional: IF PARA_OPEN expression PARA_CLOSE stmt .  [DO, WHILE, IF, ELSE, INT, VOID, RETURN, SEMICOLON, BRACE_OPEN, BRACE_CLOSE, ID, NUM, LOGICAL_NOT, MINUS, PARA_OPEN]
   35                 | IF PARA_OPEN expression PARA_CLOSE stmt . ELSE stmt

    ELSE  schiebe und gehe zu Zustand 118 über

    ELSE      [reduziere mit Regel 34 (stmt_conditional)]
    $default  reduziere mit Regel 34 (stmt_conditional)


Zustand 117

   37 stmt_loop: DO stmt WHILE PARA_OPEN expression PARA_CLOSE . SEMICOLON

    SEMICOLON  schiebe und gehe zu Zustand 119 über


Zustand 118

    7 type: . INT
    8     | . VOID
    9 declaration: . declaration COMMA declaration_element
   10            | . type declaration_element
   25 stmt: . stmt_block
   26     | . declaration SEMICOLON
   27     | . expression SEMICOLON
   28     | . stmt_conditional
   29     | . stmt_loop
   30     | . RETURN expression SEMICOLON
   31     | . RETURN SEMICOLON
   32     | . SEMICOLON
   33 stmt_block: . BRACE_OPEN stmt_list BRACE_CLOSE
   34 stmt_conditional: . IF PARA_OPEN expression PARA_CLOSE stmt
   35                 | . IF PARA_OPEN expression PARA_CLOSE stmt ELSE stmt
   35                 | IF PARA_OPEN expression PARA_CLOSE stmt ELSE . stmt
   36 stmt_loop: . WHILE PARA_OPEN expression PARA_CLOSE stmt
   37          | . DO stmt WHILE PARA_OPEN expression PARA_CLOSE SEMICOLON
   38 expression: . expression ASSIGN expression
   39           | . expression LOGICAL_OR expression
   40           | . expression LOGICAL_AND expression
   41           | . LOGICAL_NOT expression
   42           | . expression EQ expression
   43           | . expression NE expression
   44           | . expression LS expression
   45           | . expression LSEQ expression
   46           | . expression GTEQ expression
   47           | . expression GT expression
   48           | . expression PLUS expression
   49           | . expression MINUS expression
   50           | . expression MUL expression
   51           | . expression DIV expression
   52           | . expression MOD expression
   53           | . MINUS expression
   54           | . ID BRACKET_OPEN primary BRACKET_CLOSE
   55           | . PARA_OPEN expression PARA_CLOSE
   56           | . function_call PARA_CLOSE
   57           | . primary
   58 primary: . NUM
   59        | . ID
   60 function_call: . ID PARA_OPEN
   61              | . function_call_parameters
   62 function_call_parameters: . function_call_parameters COMMA expression
   63                         | . ID PARA_OPEN expression

<<<<<<< HEAD
    DO           shift, and go to state 64
    WHILE        shift, and go to state 65
    IF           shift, and go to state 66
    INT          shift, and go to state 1
    VOID         shift, and go to state 2
    RETURN       shift, and go to state 67
    SEMICOLON    shift, and go to state 68
    BRACE_OPEN   shift, and go to state 69
    ID           shift, and go to state 30
    NUM          shift, and go to state 31
    LOGICAL_NOT  shift, and go to state 32
    MINUS        shift, and go to state 33
    PARA_OPEN    shift, and go to state 34

    type                      go to state 71
    declaration               go to state 72
    stmt                      go to state 120
    stmt_block                go to state 74
    stmt_conditional          go to state 75
    stmt_loop                 go to state 76
    expression                go to state 77
    primary                   go to state 36
    function_call             go to state 37
    function_call_parameters  go to state 38


state 119
=======
    DO           schiebe und gehe zu Zustand 64 über
    WHILE        schiebe und gehe zu Zustand 65 über
    IF           schiebe und gehe zu Zustand 66 über
    INT          schiebe und gehe zu Zustand 1 über
    VOID         schiebe und gehe zu Zustand 2 über
    RETURN       schiebe und gehe zu Zustand 67 über
    SEMICOLON    schiebe und gehe zu Zustand 68 über
    BRACE_OPEN   schiebe und gehe zu Zustand 69 über
    ID           schiebe und gehe zu Zustand 30 über
    NUM          schiebe und gehe zu Zustand 31 über
    LOGICAL_NOT  schiebe und gehe zu Zustand 32 über
    MINUS        schiebe und gehe zu Zustand 33 über
    PARA_OPEN    schiebe und gehe zu Zustand 34 über

    type                      gehe zu Zustand 71 über
    declaration               gehe zu Zustand 72 über
    stmt                      gehe zu Zustand 120 über
    stmt_block                gehe zu Zustand 74 über
    stmt_conditional          gehe zu Zustand 75 über
    stmt_loop                 gehe zu Zustand 76 über
    expression                gehe zu Zustand 77 über
    primary                   gehe zu Zustand 36 über
    function_call             gehe zu Zustand 37 über
    function_call_parameters  gehe zu Zustand 38 über


Zustand 119
>>>>>>> 9becde0a99488d652db4c0a402d44d23bbadb074

   37 stmt_loop: DO stmt WHILE PARA_OPEN expression PARA_CLOSE SEMICOLON .

    $default  reduziere mit Regel 37 (stmt_loop)


Zustand 120

   35 stmt_conditional: IF PARA_OPEN expression PARA_CLOSE stmt ELSE stmt .

    $default  reduziere mit Regel 35 (stmt_conditional)
